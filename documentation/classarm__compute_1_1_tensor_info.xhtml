<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>ARM Compute Library: TensorInfo Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ARM Compute Library
   &#160;<span id="projectnumber">17.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classarm__compute_1_1_tensor_info.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">TensorInfo Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Store the tensor's metadata.  
 <a href="classarm__compute_1_1_tensor_info.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a21c2ae9fa438faf42669dadda628080c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a21c2ae9fa438faf42669dadda628080c">TensorInfo</a> ()</td></tr>
<tr class="memdesc:a21c2ae9fa438faf42669dadda628080c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a21c2ae9fa438faf42669dadda628080c">More...</a><br /></td></tr>
<tr class="separator:a21c2ae9fa438faf42669dadda628080c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39cbe92494f53364366a6cddde0b5741"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a39cbe92494f53364366a6cddde0b5741">~TensorInfo</a> ()=default</td></tr>
<tr class="memdesc:a39cbe92494f53364366a6cddde0b5741"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default destructor.  <a href="#a39cbe92494f53364366a6cddde0b5741">More...</a><br /></td></tr>
<tr class="separator:a39cbe92494f53364366a6cddde0b5741"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a494e9aa78ff5dde1788e0f9a8ba2213a">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)=default</td></tr>
<tr class="memdesc:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copy constructed.  <a href="#a494e9aa78ff5dde1788e0f9a8ba2213a">More...</a><br /></td></tr>
<tr class="separator:a494e9aa78ff5dde1788e0f9a8ba2213a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcf156ba30ff118c28690671e83ea06b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#adcf156ba30ff118c28690671e83ea06b">operator=</a> (const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;)=default</td></tr>
<tr class="memdesc:adcf156ba30ff118c28690671e83ea06b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be copied.  <a href="#adcf156ba30ff118c28690671e83ea06b">More...</a><br /></td></tr>
<tr class="separator:adcf156ba30ff118c28690671e83ea06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a134dfebc14c0e971f8df850846764f8e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a134dfebc14c0e971f8df850846764f8e">TensorInfo</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a134dfebc14c0e971f8df850846764f8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be move constructed.  <a href="#a134dfebc14c0e971f8df850846764f8e">More...</a><br /></td></tr>
<tr class="separator:a134dfebc14c0e971f8df850846764f8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">operator=</a> (<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;)=default</td></tr>
<tr class="memdesc:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allow instances of this class to be moved.  <a href="#a532c27f6bf3cd9275cb7fc9a0d0bbf6e">More...</a><br /></td></tr>
<tr class="separator:a532c27f6bf3cd9275cb7fc9a0d0bbf6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac307dc31ce68e3cf1273ffbc86e57646">TensorInfo</a> (unsigned int width, unsigned int height, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>)</td></tr>
<tr class="memdesc:ac307dc31ce68e3cf1273ffbc86e57646"><td class="mdescLeft">&#160;</td><td class="mdescRight">2D tensor constructor  <a href="#ac307dc31ce68e3cf1273ffbc86e57646">More...</a><br /></td></tr>
<tr class="separator:ac307dc31ce68e3cf1273ffbc86e57646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9fa5acc4d8fd911b9b2fece99d3d5a8d">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>)</td></tr>
<tr class="memdesc:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a9fa5acc4d8fd911b9b2fece99d3d5a8d">More...</a><br /></td></tr>
<tr class="separator:a9fa5acc4d8fd911b9b2fece99d3d5a8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a012511e08bdbf1822331597d2180497e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a012511e08bdbf1822331597d2180497e">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a330472af42b92ad18b93c06d5b510faa">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aac568c9183b365ddb66417b54ab8bf3d">fixed_point_pos</a>=0)</td></tr>
<tr class="memdesc:a012511e08bdbf1822331597d2180497e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#a012511e08bdbf1822331597d2180497e">More...</a><br /></td></tr>
<tr class="separator:a012511e08bdbf1822331597d2180497e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3e249a7d8f329aa470d6903c9e415fe"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad3e249a7d8f329aa470d6903c9e415fe">TensorInfo</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:ad3e249a7d8f329aa470d6903c9e415fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor.  <a href="#ad3e249a7d8f329aa470d6903c9e415fe">More...</a><br /></td></tr>
<tr class="separator:ad3e249a7d8f329aa470d6903c9e415fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0ae7d318c02e56a3daa9e5e4f9dab117">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>)</td></tr>
<tr class="memdesc:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#a0ae7d318c02e56a3daa9e5e4f9dab117">More...</a><br /></td></tr>
<tr class="separator:a0ae7d318c02e56a3daa9e5e4f9dab117"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad4b6171ddcf854de5d1226cd4d0b0439">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6b157a0e1ca25ef4d682d3bedfeae5f6">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad590b0e52b0574c9c2fce393ede1fa7a">offset_first_element_in_bytes</a>, size_t total_size_in_bytes)</td></tr>
<tr class="memdesc:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#ad4b6171ddcf854de5d1226cd4d0b0439">More...</a><br /></td></tr>
<tr class="separator:ad4b6171ddcf854de5d1226cd4d0b0439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3717e26c7309fda3be6e7e87f142eab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3717e26c7309fda3be6e7e87f142eab">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a330472af42b92ad18b93c06d5b510faa">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aac568c9183b365ddb66417b54ab8bf3d">fixed_point_pos</a>=0)</td></tr>
<tr class="memdesc:af3717e26c7309fda3be6e7e87f142eab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#af3717e26c7309fda3be6e7e87f142eab">More...</a><br /></td></tr>
<tr class="separator:af3717e26c7309fda3be6e7e87f142eab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b21c13a1b353cfd16dafcff4e5f4eea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a7b21c13a1b353cfd16dafcff4e5f4eea">init</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a330472af42b92ad18b93c06d5b510faa">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6b157a0e1ca25ef4d682d3bedfeae5f6">strides_in_bytes</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad590b0e52b0574c9c2fce393ede1fa7a">offset_first_element_in_bytes</a>, size_t total_size_in_bytes, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aac568c9183b365ddb66417b54ab8bf3d">fixed_point_pos</a>=0)</td></tr>
<tr class="memdesc:a7b21c13a1b353cfd16dafcff4e5f4eea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure with the given parameters.  <a href="#a7b21c13a1b353cfd16dafcff4e5f4eea">More...</a><br /></td></tr>
<tr class="separator:a7b21c13a1b353cfd16dafcff4e5f4eea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4eaa68a1707f4ff3983c6dddd21794ea">init</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata.  <a href="#a4eaa68a1707f4ff3983c6dddd21794ea">More...</a><br /></td></tr>
<tr class="separator:a4eaa68a1707f4ff3983c6dddd21794ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b7391b7025befbe44b743723feb4a9b"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4b7391b7025befbe44b743723feb4a9b">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, <a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>)</td></tr>
<tr class="memdesc:a4b7391b7025befbe44b743723feb4a9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated)  <a href="#a4b7391b7025befbe44b743723feb4a9b">More...</a><br /></td></tr>
<tr class="separator:a4b7391b7025befbe44b743723feb4a9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae37b83cdf38ffc8fa5e037faa7bcad52"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ae37b83cdf38ffc8fa5e037faa7bcad52">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a330472af42b92ad18b93c06d5b510faa">num_channels</a>, <a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a>, size_t <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aac568c9183b365ddb66417b54ab8bf3d">fixed_point_pos</a>=0)</td></tr>
<tr class="memdesc:ae37b83cdf38ffc8fa5e037faa7bcad52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given tensor shape, number of channels, data type and fixed point position.  <a href="#ae37b83cdf38ffc8fa5e037faa7bcad52">More...</a><br /></td></tr>
<tr class="separator:ae37b83cdf38ffc8fa5e037faa7bcad52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a30265f100a459de985a9f3f91db76c"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9a30265f100a459de985a9f3f91db76c">init_auto_padding</a> (const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;hog_info, unsigned int width, unsigned int height)</td></tr>
<tr class="memdesc:a9a30265f100a459de985a9f3f91db76c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata.  <a href="#a9a30265f100a459de985a9f3f91db76c">More...</a><br /></td></tr>
<tr class="separator:a9a30265f100a459de985a9f3f91db76c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7af0020334c69f249f5a2e267a5c4f4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac7af0020334c69f249f5a2e267a5c4f4">auto_padding</a> ()</td></tr>
<tr class="memdesc:ac7af0020334c69f249f5a2e267a5c4f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element and the strides to automatically computed values.  <a href="#ac7af0020334c69f249f5a2e267a5c4f4">More...</a><br /></td></tr>
<tr class="separator:ac7af0020334c69f249f5a2e267a5c4f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d37b60af520149481b2c7bbe1d829fd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a8d37b60af520149481b2c7bbe1d829fd">extend_padding</a> (const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;<a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad13a67d4dbc337c707a76401dc103ff3">padding</a>)</td></tr>
<tr class="memdesc:a8d37b60af520149481b2c7bbe1d829fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the offset to the first element, the strides and the total size.  <a href="#a8d37b60af520149481b2c7bbe1d829fd">More...</a><br /></td></tr>
<tr class="separator:a8d37b60af520149481b2c7bbe1d829fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f4481a2c496ef1d176f305c25f50202"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a1f4481a2c496ef1d176f305c25f50202">set_format</a> (<a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a>)</td></tr>
<tr class="memdesc:a1f4481a2c496ef1d176f305c25f50202"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the format of an already initialized tensor.  <a href="#a1f4481a2c496ef1d176f305c25f50202">More...</a><br /></td></tr>
<tr class="separator:a1f4481a2c496ef1d176f305c25f50202"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c223d48dcc4afd27b6f3932182622b6"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6c223d48dcc4afd27b6f3932182622b6">dimension</a> (size_t index) const </td></tr>
<tr class="memdesc:a6c223d48dcc4afd27b6f3932182622b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the size of the requested dimension.  <a href="#a6c223d48dcc4afd27b6f3932182622b6">More...</a><br /></td></tr>
<tr class="separator:a6c223d48dcc4afd27b6f3932182622b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b157a0e1ca25ef4d682d3bedfeae5f6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6b157a0e1ca25ef4d682d3bedfeae5f6">strides_in_bytes</a> () const </td></tr>
<tr class="memdesc:a6b157a0e1ca25ef4d682d3bedfeae5f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">The strides in bytes for accessing each dimension of the tensor.  <a href="#a6b157a0e1ca25ef4d682d3bedfeae5f6">More...</a><br /></td></tr>
<tr class="separator:a6b157a0e1ca25ef4d682d3bedfeae5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad590b0e52b0574c9c2fce393ede1fa7a"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad590b0e52b0574c9c2fce393ede1fa7a">offset_first_element_in_bytes</a> () const </td></tr>
<tr class="memdesc:ad590b0e52b0574c9c2fce393ede1fa7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset from the beginning of the memory allocation to the first element of the tensor.  <a href="#ad590b0e52b0574c9c2fce393ede1fa7a">More...</a><br /></td></tr>
<tr class="separator:ad590b0e52b0574c9c2fce393ede1fa7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf5cc084e0feafccc97492d688f4e2e2"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaf5cc084e0feafccc97492d688f4e2e2">offset_element_in_bytes</a> (const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;pos) const </td></tr>
<tr class="memdesc:aaf5cc084e0feafccc97492d688f4e2e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...)  <a href="#aaf5cc084e0feafccc97492d688f4e2e2">More...</a><br /></td></tr>
<tr class="separator:aaf5cc084e0feafccc97492d688f4e2e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac568c9183b365ddb66417b54ab8bf3d"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aac568c9183b365ddb66417b54ab8bf3d">fixed_point_pos</a> () const </td></tr>
<tr class="memdesc:aac568c9183b365ddb66417b54ab8bf3d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fixed point position used when the tensor data type is S8, S16 or S32.  <a href="#aac568c9183b365ddb66417b54ab8bf3d">More...</a><br /></td></tr>
<tr class="separator:aac568c9183b365ddb66417b54ab8bf3d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a448f57f9d6aec61b3d85b898affe4a2e"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a448f57f9d6aec61b3d85b898affe4a2e">element_size</a> () const </td></tr>
<tr class="memdesc:a448f57f9d6aec61b3d85b898affe4a2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Element size in bytes calculated as data_size() * num_channels.  <a href="#a448f57f9d6aec61b3d85b898affe4a2e">More...</a><br /></td></tr>
<tr class="separator:a448f57f9d6aec61b3d85b898affe4a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38382dc1f04d28cab04d921b8324dc07"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a38382dc1f04d28cab04d921b8324dc07">num_dimensions</a> () const </td></tr>
<tr class="memdesc:a38382dc1f04d28cab04d921b8324dc07"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of dimensions of the tensor (rank)  <a href="#a38382dc1f04d28cab04d921b8324dc07">More...</a><br /></td></tr>
<tr class="separator:a38382dc1f04d28cab04d921b8324dc07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a330472af42b92ad18b93c06d5b510faa"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a330472af42b92ad18b93c06d5b510faa">num_channels</a> () const </td></tr>
<tr class="memdesc:a330472af42b92ad18b93c06d5b510faa"><td class="mdescLeft">&#160;</td><td class="mdescRight">The number of channels for each tensor element.  <a href="#a330472af42b92ad18b93c06d5b510faa">More...</a><br /></td></tr>
<tr class="separator:a330472af42b92ad18b93c06d5b510faa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3374fa8fcc6d226dc2b82317ab4d079"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#af3374fa8fcc6d226dc2b82317ab4d079">tensor_shape</a> () const </td></tr>
<tr class="memdesc:af3374fa8fcc6d226dc2b82317ab4d079"><td class="mdescLeft">&#160;</td><td class="mdescRight">Size for each dimension of the tensor.  <a href="#af3374fa8fcc6d226dc2b82317ab4d079">More...</a><br /></td></tr>
<tr class="separator:af3374fa8fcc6d226dc2b82317ab4d079"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a45cc7b9a37aa9f0e7d479248a27e1f58">data_type</a> () const </td></tr>
<tr class="memdesc:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data type used for each element of the tensor.  <a href="#a45cc7b9a37aa9f0e7d479248a27e1f58">More...</a><br /></td></tr>
<tr class="separator:a45cc7b9a37aa9f0e7d479248a27e1f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c875a3203d902e2ad6bc3045355e69e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a0c875a3203d902e2ad6bc3045355e69e">format</a> () const </td></tr>
<tr class="memdesc:a0c875a3203d902e2ad6bc3045355e69e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Colour format of the image.  <a href="#a0c875a3203d902e2ad6bc3045355e69e">More...</a><br /></td></tr>
<tr class="separator:a0c875a3203d902e2ad6bc3045355e69e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eaec01ba2c12093db609d1034ad0bc1"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a4eaec01ba2c12093db609d1034ad0bc1">total_size</a> () const </td></tr>
<tr class="memdesc:a4eaec01ba2c12093db609d1034ad0bc1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the total size of the tensor in bytes.  <a href="#a4eaec01ba2c12093db609d1034ad0bc1">More...</a><br /></td></tr>
<tr class="separator:a4eaec01ba2c12093db609d1034ad0bc1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad13a67d4dbc337c707a76401dc103ff3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ad13a67d4dbc337c707a76401dc103ff3">padding</a> () const </td></tr>
<tr class="memdesc:ad13a67d4dbc337c707a76401dc103ff3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Padding of tensor.  <a href="#ad13a67d4dbc337c707a76401dc103ff3">More...</a><br /></td></tr>
<tr class="separator:ad13a67d4dbc337c707a76401dc103ff3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7c904411f0871ed5b37eecb1c03de2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a9f7c904411f0871ed5b37eecb1c03de2">has_padding</a> () const </td></tr>
<tr class="memdesc:a9f7c904411f0871ed5b37eecb1c03de2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the tensor has been allocated with padding or not.  <a href="#a9f7c904411f0871ed5b37eecb1c03de2">More...</a><br /></td></tr>
<tr class="separator:a9f7c904411f0871ed5b37eecb1c03de2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa29d70e3b3c82e0857a6be5280b70ee0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa29d70e3b3c82e0857a6be5280b70ee0">is_resizable</a> () const </td></tr>
<tr class="memdesc:aa29d70e3b3c82e0857a6be5280b70ee0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flag indicating whether the size of the tensor can be changed.  <a href="#aa29d70e3b3c82e0857a6be5280b70ee0">More...</a><br /></td></tr>
<tr class="separator:aa29d70e3b3c82e0857a6be5280b70ee0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a951c1a7a29e99b39d59ee44111291c76"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a951c1a7a29e99b39d59ee44111291c76">set_is_resizable</a> (bool <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aa29d70e3b3c82e0857a6be5280b70ee0">is_resizable</a>)</td></tr>
<tr class="memdesc:a951c1a7a29e99b39d59ee44111291c76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the flag whether the tensor size can be changed.  <a href="#a951c1a7a29e99b39d59ee44111291c76">More...</a><br /></td></tr>
<tr class="separator:a951c1a7a29e99b39d59ee44111291c76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac437ef0718add962a4059fb3b3084c34"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac437ef0718add962a4059fb3b3084c34">valid_region</a> () const </td></tr>
<tr class="memdesc:ac437ef0718add962a4059fb3b3084c34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Valid region of the tensor.  <a href="#ac437ef0718add962a4059fb3b3084c34">More...</a><br /></td></tr>
<tr class="separator:ac437ef0718add962a4059fb3b3084c34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6922a99119f324abe0e16c9678f71922"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml#a6922a99119f324abe0e16c9678f71922">set_valid_region</a> (<a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#ac437ef0718add962a4059fb3b3084c34">valid_region</a>)</td></tr>
<tr class="memdesc:a6922a99119f324abe0e16c9678f71922"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the valid region of the tensor.  <a href="#a6922a99119f324abe0e16c9678f71922">More...</a><br /></td></tr>
<tr class="separator:a6922a99119f324abe0e16c9678f71922"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Store the tensor's metadata. </p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00040">40</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a21c2ae9fa438faf42669dadda628080c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>

</div>
</div>
<a class="anchor" id="a39cbe92494f53364366a6cddde0b5741"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Default destructor. </p>

</div>
</div>
<a class="anchor" id="a494e9aa78ff5dde1788e0f9a8ba2213a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copy constructed. </p>

</div>
</div>
<a class="anchor" id="a134dfebc14c0e971f8df850846764f8e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be move constructed. </p>

</div>
</div>
<a class="anchor" id="ac307dc31ce68e3cf1273ffbc86e57646"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>2D tensor constructor </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9fa5acc4d8fd911b9b2fece99d3d5a8d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a012511e08bdbf1822331597d2180497e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_pos</td><td>(Optional) It specifies the fixed point position when the tensor data type is INT8, INT16 or INT32. (Default = 0) If 0, calculations are performed in integer math </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad3e249a7d8f329aa470d6903c9e415fe"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ac7af0020334c69f249f5a2e267a5c4f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool auto_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the offset to the first element and the strides to automatically computed values. </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides or the offset to the first element have changed. </dd></dl>

</div>
</div>
<a class="anchor" id="a45cc7b9a37aa9f0e7d479248a27e1f58"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a> data_type </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Data type used for each element of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_tensor.xhtml" title="Basic implementation of the tensor interface. ">Tensor</a> data type </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00263">263</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_validate_8h_source.xhtml#l00227">arm_compute::error_on_data_type_not_in()</a>, and <a class="el" href="_validate_8h_source.xhtml#l00162">arm_compute::error_on_mismatching_data_types()</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">return</span> _data_type;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6c223d48dcc4afd27b6f3932182622b6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t dimension </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the size of the requested dimension. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">index</td><td>Index of the dimension</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Dimension of the requested dimension </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00190">190</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_validate_8h_source.xhtml#l00109">arm_compute::have_different_shapes()</a>, <a class="el" href="cl__events_8cpp_source.xhtml#l00033">main_cl_events()</a>, <a class="el" href="neoncl__scale__median__gaussian_8cpp_source.xhtml#l00039">main_neoncl_scale_median_gaussian()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00160">Window::use_tensor_dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> _tensor_shape[index];</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a448f57f9d6aec61b3d85b898affe4a2e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t element_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Element size in bytes calculated as data_size() * num_channels. </p>
<dl class="section return"><dt>Returns</dt><dd>The size of one element in bytes </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00231">231</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="arm__compute_2core_2_utils_8h_source.xhtml#l00098">arm_compute::data_size_from_type()</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8h_source.xhtml#l00411">arm_compute::compute_strides()</a>.</p>
<div class="fragment"><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">data_size_from_type</a>(_data_type) * _num_channels;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    }</div><div class="ttc" id="namespacearm__compute_xhtml_abb7e0f23a4f2e63f39433f158dad47ab"><div class="ttname"><a href="namespacearm__compute.xhtml#abb7e0f23a4f2e63f39433f158dad47ab">arm_compute::data_size_from_type</a></div><div class="ttdeci">size_t data_size_from_type(DataType data_type)</div><div class="ttdoc">The size in bytes of the data type. </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2core_2_utils_8h_source.xhtml#l00098">Utils.h:98</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a8d37b60af520149481b2c7bbe1d829fd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extend_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> &amp;&#160;</td>
          <td class="paramname"><em>padding</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the offset to the first element, the strides and the total size. </p>
<dl class="section note"><dt>Note</dt><dd>This function can only increase the offset, strides and total size.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">padding</td><td>Padding around the XY plane in number of elements.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the strides, offset and total size have changed. </dd></dl>

</div>
</div>
<a class="anchor" id="aac568c9183b365ddb66417b54ab8bf3d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t fixed_point_pos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fixed point position used when the tensor data type is S8, S16 or S32. </p>
<dl class="section return"><dt>Returns</dt><dd>The fixed point position </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00223">223</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">return</span> _fixed_point_pos;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0c875a3203d902e2ad6bc3045355e69e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a> format </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Colour format of the image. </p>
<dl class="section return"><dt>Returns</dt><dd>Colour format of the image </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00271">271</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">return</span> _format;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a9f7c904411f0871ed5b37eecb1c03de2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool has_padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the tensor has been allocated with padding or not. </p>
<dl class="section return"><dt>Returns</dt><dd>True if padding is allocated in the tensor, otherwise false. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00295">295</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="_types_8h_source.xhtml#l00156">BorderSize::empty()</a>.</p>
<div class="fragment"><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordflow">return</span> !_padding.<a class="code" href="structarm__compute_1_1_border_size.xhtml#adffbf97e7b8b64e7cf32f0254cddf3c4">empty</a>();</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div><div class="ttc" id="structarm__compute_1_1_border_size_xhtml_adffbf97e7b8b64e7cf32f0254cddf3c4"><div class="ttname"><a href="structarm__compute_1_1_border_size.xhtml#adffbf97e7b8b64e7cf32f0254cddf3c4">arm_compute::BorderSize::empty</a></div><div class="ttdeci">constexpr bool empty() const </div><div class="ttdoc">Check if the entire border is zero. </div><div class="ttdef"><b>Definition:</b> <a href="_types_8h_source.xhtml#l00156">Types.h:156</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0ae7d318c02e56a3daa9e5e4f9dab117"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad4b6171ddcf854de5d1226cd4d0b0439"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af3717e26c7309fda3be6e7e87f142eab"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_pos</td><td>(Optional) Fixed point position when the tensor data type is INT8, INT16 or INT32 (default = 0). If 0, calculations are performed in integer arithmetic. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7b21c13a1b353cfd16dafcff4e5f4eea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a> &amp;&#160;</td>
          <td class="paramname"><em>strides_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>offset_first_element_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>total_size_in_bytes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure with the given parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>Size for each dimension of the tensor in number of elements. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>Desired number of channels for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">strides_in_bytes</td><td>Stride in bytes for accessing each dimension of the tensor. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">offset_first_element_in_bytes</td><td>Offset in bytes from the beginning of memory allocation to access the first element. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">total_size_in_bytes</td><td>Size in bytes of the memory allocation (including the offset to the first element). </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_pos</td><td>(Optional) Fixed point position when the tensor data type is INT8, INT16 or INT32 (default = 0). If 0, calculations are performed in integer arithmetic. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4eaa68a1707f4ff3983c6dddd21794ea"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void init </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4b7391b7025befbe44b743723feb4a9b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape and single-plane format, (Padding is automatically calculated) </p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single plane format of the image.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="ae37b83cdf38ffc8fa5e037faa7bcad52"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a> &amp;&#160;</td>
          <td class="paramname"><em>tensor_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>num_channels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ad8ed01ff3ff33333d8e19db4d2818bb6">DataType</a>&#160;</td>
          <td class="paramname"><em>data_type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>fixed_point_pos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given tensor shape, number of channels, data type and fixed point position. </p>
<p>(Padding is automatically calculated)</p>
<dl class="section note"><dt>Note</dt><dd>The padding used by this method is really conservative so that the tensor can be used for most functions.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">tensor_shape</td><td>It specifies the size for each dimension of the tensor in number of elements </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">num_channels</td><td>It indicates the number of channels for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data_type</td><td>Data type to use for each tensor element </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">fixed_point_pos</td><td>(Optional) It specifies the fixed point position when the tensor data type is INT8, INT16 or INT32. (Default = 0) If 0, calculations are performed in integer math</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Total allocation size including padding in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="a9a30265f100a459de985a9f3f91db76c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t init_auto_padding </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml">HOGInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>hog_info</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the metadata structure for the given <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata. </p>
<dl class="section note"><dt>Note</dt><dd>init_auto_padding will be used for the tensor initialization.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">hog_info</td><td><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata used to allocate normalized <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> space </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">width</td><td>Width of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">height</td><td>Height of the 2D tensor where the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor will be computed on </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa29d70e3b3c82e0857a6be5280b70ee0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool is_resizable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flag indicating whether the size of the tensor can be changed. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the tensor size can be changed. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00303">303</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_tensor_info_8h_source.xhtml#l00308">TensorInfo::set_is_resizable()</a>.</p>
<div class="fragment"><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    {</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">return</span> _is_resizable;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a330472af42b92ad18b93c06d5b510faa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_channels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of channels for each tensor element. </p>
<dl class="section return"><dt>Returns</dt><dd>The number of channels for each tensor element </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00247">247</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_validate_8h_source.xhtml#l00259">arm_compute::error_on_data_type_channel_not_in()</a>.</p>
<div class="fragment"><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">return</span> _num_channels;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a38382dc1f04d28cab04d921b8324dc07"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t num_dimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The number of dimensions of the tensor (rank) </p>
<dl class="section return"><dt>Returns</dt><dd>The number of dimensions of the tensor (rank) </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00239">239</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="_dimensions_8h_source.xhtml#l00108">Dimensions&lt; T &gt;::num_dimensions()</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8h_source.xhtml#l00389">arm_compute::compute_strides()</a>, and <a class="el" href="_window_8inl_source.xhtml#l00160">Window::use_tensor_dimensions()</a>.</p>
<div class="fragment"><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    {</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> _tensor_shape.<a class="code" href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">num_dimensions</a>();</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_dimensions_xhtml_a0f59f175e7682c7ed5f4ea30ef687834"><div class="ttname"><a href="classarm__compute_1_1_dimensions.xhtml#a0f59f175e7682c7ed5f4ea30ef687834">arm_compute::Dimensions::num_dimensions</a></div><div class="ttdeci">unsigned int num_dimensions() const </div><div class="ttdoc">Returns the effective dimensionality of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_dimensions_8h_source.xhtml#l00108">Dimensions.h:108</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="aaf5cc084e0feafccc97492d688f4e2e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t offset_element_in_bytes </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_coordinates.xhtml">Coordinates</a> &amp;&#160;</td>
          <td class="paramname"><em>pos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The offset in bytes from the beginning of the memory allocation to access the element at position (x, y, z ...) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">pos</td><td><a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> with the coordinates of the element to access. The size of this vector must be equal to the number of dimensions of the tensor</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Offset in bytes from the beginning of the memory allocation to access the element (x, y, z, ...) </dd></dl>

<p>Referenced by <a class="el" href="_utils_8cpp_source.xhtml#l00101">test_helpers::draw_detection_rectangle()</a>, <a class="el" href="_tensor_info_8h_source.xhtml#l00207">TensorInfo::offset_first_element_in_bytes()</a>, and <a class="el" href="_i_tensor_8h_source.xhtml#l00063">ITensor::ptr_to_element()</a>.</p>

</div>
</div>
<a class="anchor" id="ad590b0e52b0574c9c2fce393ede1fa7a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t offset_first_element_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The offset from the beginning of the memory allocation to the first element of the tensor. </p>
<p>This can be used to access efficiently elements in a 2D tensor</p>
<dl class="section return"><dt>Returns</dt><dd>The offset in bytes to access the first element of the tensor. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00207">207</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="classarm__compute_1_1_tensor_info.xhtml#aaf5cc084e0feafccc97492d688f4e2e2">TensorInfo::offset_element_in_bytes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    {</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> _offset_first_element_in_bytes;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="adcf156ba30ff118c28690671e83ea06b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be copied. </p>

</div>
</div>
<a class="anchor" id="a532c27f6bf3cd9275cb7fc9a0d0bbf6e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a> &amp;&amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">default</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allow instances of this class to be moved. </p>

</div>
</div>
<a class="anchor" id="ad13a67d4dbc337c707a76401dc103ff3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacearm__compute.xhtml#a4467b302fc9ec312c40580336ab783da">PaddingSize</a> padding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Padding of tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>Padding. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00287">287</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        <span class="keywordflow">return</span> _padding;</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a1f4481a2c496ef1d176f305c25f50202"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void set_format </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacearm__compute.xhtml#ab4e88c89b3b7ea1735996cc4def22d58">Format</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the format of an already initialized tensor. </p>
<dl class="section note"><dt>Note</dt><dd>The passed format must be compatible with the existing number of channels and data type of the tensor.</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">format</td><td>Single-plane format of the tensor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a951c1a7a29e99b39d59ee44111291c76"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_is_resizable </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>is_resizable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag whether the tensor size can be changed. </p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00308">308</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>References <a class="el" href="_tensor_info_8h_source.xhtml#l00303">TensorInfo::is_resizable()</a>.</p>
<div class="fragment"><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    {</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        _is_resizable = <a class="code" href="classarm__compute_1_1_tensor_info.xhtml#aa29d70e3b3c82e0857a6be5280b70ee0">is_resizable</a>;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_aa29d70e3b3c82e0857a6be5280b70ee0"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#aa29d70e3b3c82e0857a6be5280b70ee0">arm_compute::TensorInfo::is_resizable</a></div><div class="ttdeci">bool is_resizable() const </div><div class="ttdoc">Flag indicating whether the size of the tensor can be changed. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00303">TensorInfo.h:303</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6922a99119f324abe0e16c9678f71922"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void set_valid_region </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a>&#160;</td>
          <td class="paramname"><em>valid_region</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the valid region of the tensor. </p>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00321">321</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        _valid_region = std::move(<a class="code" href="classarm__compute_1_1_tensor_info.xhtml#ac437ef0718add962a4059fb3b3084c34">valid_region</a>);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    }</div><div class="ttc" id="classarm__compute_1_1_tensor_info_xhtml_ac437ef0718add962a4059fb3b3084c34"><div class="ttname"><a href="classarm__compute_1_1_tensor_info.xhtml#ac437ef0718add962a4059fb3b3084c34">arm_compute::TensorInfo::valid_region</a></div><div class="ttdeci">ValidRegion valid_region() const </div><div class="ttdoc">Valid region of the tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_tensor_info_8h_source.xhtml#l00316">TensorInfo.h:316</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a6b157a0e1ca25ef4d682d3bedfeae5f6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_strides.xhtml">Strides</a>&amp; strides_in_bytes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The strides in bytes for accessing each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes. ">Strides</a> in bytes for each tensor dimension </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00198">198</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00445">arm_compute::colorconvert_iyuv_to_rgb()</a>, <a class="el" href="_n_e_color_convert_helper_8inl_source.xhtml#l00389">arm_compute::colorconvert_nv12_to_rgb()</a>, and <a class="el" href="_utils_8cpp_source.xhtml#l00101">test_helpers::draw_detection_rectangle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> _strides_in_bytes;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="af3374fa8fcc6d226dc2b82317ab4d079"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classarm__compute_1_1_tensor_shape.xhtml">TensorShape</a>&amp; tensor_shape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Size for each dimension of the tensor. </p>
<dl class="section return"><dt>Returns</dt><dd>A vector with the size for each dimension of the tensor </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00255">255</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>

<p>Referenced by <a class="el" href="_helpers_8h_source.xhtml#l00389">arm_compute::compute_strides()</a>.</p>
<div class="fragment"><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">return</span> _tensor_shape;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a4eaec01ba2c12093db609d1034ad0bc1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t total_size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the total size of the tensor in bytes. </p>
<dl class="section return"><dt>Returns</dt><dd>Total size of the tensor in bytes. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00279">279</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    {</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">return</span> _total_size;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ac437ef0718add962a4059fb3b3084c34"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structarm__compute_1_1_valid_region.xhtml">ValidRegion</a> valid_region </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Valid region of the tensor. </p>
<p>All elements in the valid region have defined values, i.e. are not undefined.</p>
<dl class="section return"><dt>Returns</dt><dd>The valid region. </dd></dl>

<p>Definition at line <a class="el" href="_tensor_info_8h_source.xhtml#l00316">316</a> of file <a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">return</span> _valid_region;</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    }</div></div><!-- fragment -->
</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>arm_compute/core/<a class="el" href="_tensor_info_8h_source.xhtml">TensorInfo.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="namespacearm__compute.xhtml">arm_compute</a></li><li class="navelem"><a class="el" href="classarm__compute_1_1_tensor_info.xhtml">TensorInfo</a></li>
    <li class="footer">Generated on Wed May 3 2017 17:20:05 for ARM Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
