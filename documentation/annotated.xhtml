<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>ARM Compute Library: Data Structures</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ARM Compute Library
   &#160;<span id="projectnumber">17.05</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li class="current"><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li><a href="classes.xhtml"><span>Data&#160;Structure&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Data&#160;Fields</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('annotated.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Data Structures</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock">Here are the data structures with brief descriptions:</div><div class="directory">
<div class="levels">[detail level <span onclick="javascript:toggleLevel(1);">1</span><span onclick="javascript:toggleLevel(2);">2</span><span onclick="javascript:toggleLevel(3);">3</span>]</div><table class="directory">
<tr id="row_0_" class="even"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_0_" class="arrow" onclick="toggleFolder('0_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacearm__compute.xhtml" target="_self">arm_compute</a></td><td class="desc"></td></tr>
<tr id="row_0_0_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_auto_padding.xhtml" target="_self">AccessWindowAutoPadding</a></td><td class="desc">Dummy access window </td></tr>
<tr id="row_0_1_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_horizontal.xhtml" target="_self">AccessWindowHorizontal</a></td><td class="desc">Implementation of a row access pattern </td></tr>
<tr id="row_0_2_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_rectangle.xhtml" target="_self">AccessWindowRectangle</a></td><td class="desc">Implementation of a rectangular access pattern </td></tr>
<tr id="row_0_3_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_static.xhtml" target="_self">AccessWindowStatic</a></td><td class="desc">Implementation of a static rectangular access pattern </td></tr>
<tr id="row_0_4_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_transpose.xhtml" target="_self">AccessWindowTranspose</a></td><td class="desc">Implementation of a XY-transpose access pattern </td></tr>
<tr id="row_0_5_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_access_window_vertical.xhtml" target="_self">AccessWindowVertical</a></td><td class="desc">Implementation of a column access pattern </td></tr>
<tr id="row_0_6_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_activation_layer_info.xhtml" target="_self">ActivationLayerInfo</a></td><td class="desc">Activation Layer Information class </td></tr>
<tr id="row_0_7_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_array.xhtml" target="_self">Array</a></td><td class="desc">Basic implementation of the <a class="el" href="classarm__compute_1_1_i_array.xhtml" title="Array of type T. ">IArray</a> interface which allocates a static number of T values </td></tr>
<tr id="row_0_8_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_border_size.xhtml" target="_self">BorderSize</a></td><td class="desc">Container for 2D border size </td></tr>
<tr id="row_0_9_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_absolute_difference.xhtml" target="_self">CLAbsoluteDifference</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_absolute_difference_kernel.xhtml">CLAbsoluteDifferenceKernel</a> </td></tr>
<tr id="row_0_10_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_absolute_difference_kernel.xhtml" target="_self">CLAbsoluteDifferenceKernel</a></td><td class="desc">Interface for the absolute difference kernel </td></tr>
<tr id="row_0_11_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate.xhtml" target="_self">CLAccumulate</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_kernel.xhtml">CLAccumulateKernel</a> </td></tr>
<tr id="row_0_12_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_kernel.xhtml" target="_self">CLAccumulateKernel</a></td><td class="desc">Interface for the accumulate kernel </td></tr>
<tr id="row_0_13_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_squared.xhtml" target="_self">CLAccumulateSquared</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_squared_kernel.xhtml">CLAccumulateSquaredKernel</a> </td></tr>
<tr id="row_0_14_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_squared_kernel.xhtml" target="_self">CLAccumulateSquaredKernel</a></td><td class="desc">Interface for the accumulate squared kernel </td></tr>
<tr id="row_0_15_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted.xhtml" target="_self">CLAccumulateWeighted</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted_kernel.xhtml">CLAccumulateWeightedKernel</a> </td></tr>
<tr id="row_0_16_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_accumulate_weighted_kernel.xhtml" target="_self">CLAccumulateWeightedKernel</a></td><td class="desc">Interface for the accumulate weighted kernel </td></tr>
<tr id="row_0_17_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_activation_layer.xhtml" target="_self">CLActivationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_activation_layer_kernel.xhtml">CLActivationLayerKernel</a> </td></tr>
<tr id="row_0_18_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_activation_layer_kernel.xhtml" target="_self">CLActivationLayerKernel</a></td><td class="desc">Interface for the activation layer kernel </td></tr>
<tr id="row_0_19_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition.xhtml" target="_self">CLArithmeticAddition</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition_kernel.xhtml">CLArithmeticAdditionKernel</a> </td></tr>
<tr id="row_0_20_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_addition_kernel.xhtml" target="_self">CLArithmeticAdditionKernel</a></td><td class="desc">Interface for the arithmetic addition kernel </td></tr>
<tr id="row_0_21_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction.xhtml" target="_self">CLArithmeticSubtraction</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction_kernel.xhtml">CLArithmeticSubtractionKernel</a> </td></tr>
<tr id="row_0_22_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_arithmetic_subtraction_kernel.xhtml" target="_self">CLArithmeticSubtractionKernel</a></td><td class="desc">Interface for the arithmetic subtraction kernel </td></tr>
<tr id="row_0_23_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_array.xhtml" target="_self">CLArray</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_array.xhtml" title="CLArray implementation. ">CLArray</a> implementation </td></tr>
<tr id="row_0_24_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_and.xhtml" target="_self">CLBitwiseAnd</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_and_kernel.xhtml">CLBitwiseAndKernel</a> </td></tr>
<tr id="row_0_25_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_and_kernel.xhtml" target="_self">CLBitwiseAndKernel</a></td><td class="desc">Interface for the bitwise AND operation kernel </td></tr>
<tr id="row_0_26_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_not.xhtml" target="_self">CLBitwiseNot</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_not_kernel.xhtml">CLBitwiseNotKernel</a> </td></tr>
<tr id="row_0_27_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_not_kernel.xhtml" target="_self">CLBitwiseNotKernel</a></td><td class="desc">Interface for the bitwise NOT operation kernel </td></tr>
<tr id="row_0_28_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_or.xhtml" target="_self">CLBitwiseOr</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_or_kernel.xhtml">CLBitwiseOrKernel</a> </td></tr>
<tr id="row_0_29_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_or_kernel.xhtml" target="_self">CLBitwiseOrKernel</a></td><td class="desc">Interface for the bitwise OR operation kernel </td></tr>
<tr id="row_0_30_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_xor.xhtml" target="_self">CLBitwiseXor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_bitwise_xor_kernel.xhtml">CLBitwiseXorKernel</a> </td></tr>
<tr id="row_0_31_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_bitwise_xor_kernel.xhtml" target="_self">CLBitwiseXorKernel</a></td><td class="desc">Interface for the bitwise XOR operation kernel </td></tr>
<tr id="row_0_32_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_box3x3.xhtml" target="_self">CLBox3x3</a></td><td class="desc">Basic function to execute box filter 3x3 </td></tr>
<tr id="row_0_33_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_box3x3_kernel.xhtml" target="_self">CLBox3x3Kernel</a></td><td class="desc">Interface for the box 3x3 filter kernel </td></tr>
<tr id="row_0_34_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_canny_edge.xhtml" target="_self">CLCannyEdge</a></td><td class="desc">Basic function to execute canny edge on OpenCL </td></tr>
<tr id="row_0_35_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_combine.xhtml" target="_self">CLChannelCombine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_combine_kernel.xhtml">CLChannelCombineKernel</a> to perform channel combination </td></tr>
<tr id="row_0_36_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_combine_kernel.xhtml" target="_self">CLChannelCombineKernel</a></td><td class="desc">Interface for the channel combine kernel </td></tr>
<tr id="row_0_37_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_extract.xhtml" target="_self">CLChannelExtract</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_channel_extract_kernel.xhtml">CLChannelExtractKernel</a> to perform channel extraction </td></tr>
<tr id="row_0_38_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_channel_extract_kernel.xhtml" target="_self">CLChannelExtractKernel</a></td><td class="desc">Interface for the channel extract kernel </td></tr>
<tr id="row_0_39_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_coefficient_table.xhtml" target="_self">CLCoefficientTable</a></td><td class="desc">Structure for storing Spatial Gradient Matrix and the minimum eigenvalue for each keypoint </td></tr>
<tr id="row_0_40_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_col2_im_kernel.xhtml" target="_self">CLCol2ImKernel</a></td><td class="desc">Interface for the col2im reshaping kernel </td></tr>
<tr id="row_0_41_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_color_convert.xhtml" target="_self">CLColorConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_color_convert_kernel.xhtml">CLColorConvertKernel</a> </td></tr>
<tr id="row_0_42_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_color_convert_kernel.xhtml" target="_self">CLColorConvertKernel</a></td><td class="desc">Interface for the color convert kernel </td></tr>
<tr id="row_0_43_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution3x3.xhtml" target="_self">CLConvolution3x3</a></td><td class="desc">Basic function to execute convolution of size 3x3 </td></tr>
<tr id="row_0_44_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_kernel.xhtml" target="_self">CLConvolutionKernel</a></td><td class="desc">Interface for the kernel to run an arbitrary size convolution on a tensor </td></tr>
<tr id="row_0_45_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_layer.xhtml" target="_self">CLConvolutionLayer</a></td><td class="desc">Basic function to compute the convolution layer </td></tr>
<tr id="row_0_46_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_layer_weights_reshape_kernel.xhtml" target="_self">CLConvolutionLayerWeightsReshapeKernel</a></td><td class="desc">Interface for the weights reshape kernel used by convolution and fully connected layers </td></tr>
<tr id="row_0_47_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_rectangle.xhtml" target="_self">CLConvolutionRectangle</a></td><td class="desc">Basic function to execute non-square convolution </td></tr>
<tr id="row_0_48_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_rectangle_kernel.xhtml" target="_self">CLConvolutionRectangleKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the running convolution on a rectangle matrix </td></tr>
<tr id="row_0_49_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_convolution_square.xhtml" target="_self">CLConvolutionSquare</a></td><td class="desc">Basic function to execute square convolution.Currently it supports 5x5, 7x7, 9x9 </td></tr>
<tr id="row_0_50_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_copy_to_array_kernel.xhtml" target="_self">CLCopyToArrayKernel</a></td><td class="desc">CL kernel to copy keypoints information to ICLKeyPointArray and counts the number of key points </td></tr>
<tr id="row_0_51_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_convert.xhtml" target="_self">CLDepthConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_depth_convert_kernel.xhtml">CLDepthConvertKernel</a> </td></tr>
<tr id="row_0_52_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_depth_convert_kernel.xhtml" target="_self">CLDepthConvertKernel</a></td><td class="desc">Interface for the depth conversion kernel </td></tr>
<tr id="row_0_53_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_derivative.xhtml" target="_self">CLDerivative</a></td><td class="desc">Basic function to execute first order derivative operator </td></tr>
<tr id="row_0_54_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_derivative_kernel.xhtml" target="_self">CLDerivativeKernel</a></td><td class="desc">Interface for the derivative kernel </td></tr>
<tr id="row_0_55_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dilate.xhtml" target="_self">CLDilate</a></td><td class="desc">Basic function to execute dilate </td></tr>
<tr id="row_0_56_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_dilate_kernel.xhtml" target="_self">CLDilateKernel</a></td><td class="desc">Interface for the dilate kernel </td></tr>
<tr id="row_0_57_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_distribution1_d.xhtml" target="_self">CLDistribution1D</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_distribution1_d.xhtml" title="CLDistribution1D object class. ">CLDistribution1D</a> object class </td></tr>
<tr id="row_0_58_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_edge_non_max_suppression_kernel.xhtml" target="_self">CLEdgeNonMaxSuppressionKernel</a></td><td class="desc">OpenCL kernel to perform Non-Maxima suppression for Canny Edge </td></tr>
<tr id="row_0_59_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_edge_trace_kernel.xhtml" target="_self">CLEdgeTraceKernel</a></td><td class="desc">OpenCL kernel to perform Edge tracing </td></tr>
<tr id="row_0_60_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_equalize_histogram.xhtml" target="_self">CLEqualizeHistogram</a></td><td class="desc">Basic function to execute histogram equalization </td></tr>
<tr id="row_0_61_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_erode.xhtml" target="_self">CLErode</a></td><td class="desc">Basic function to execute erode </td></tr>
<tr id="row_0_62_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_erode_kernel.xhtml" target="_self">CLErodeKernel</a></td><td class="desc">Interface for the erode kernel </td></tr>
<tr id="row_0_63_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fast_corners.xhtml" target="_self">CLFastCorners</a></td><td class="desc">Basic function to execute fast corners </td></tr>
<tr id="row_0_64_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fast_corners_kernel.xhtml" target="_self">CLFastCornersKernel</a></td><td class="desc">CL kernel to perform fast corners </td></tr>
<tr id="row_0_65_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fill_border.xhtml" target="_self">CLFillBorder</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml">CLFillBorderKernel</a> </td></tr>
<tr id="row_0_66_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fill_border_kernel.xhtml" target="_self">CLFillBorderKernel</a></td><td class="desc">Interface for filling the border of a kernel </td></tr>
<tr id="row_0_67_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_fully_connected_layer.xhtml" target="_self">CLFullyConnectedLayer</a></td><td class="desc">Basic function to compute a Fully Connected layer on OpenCL </td></tr>
<tr id="row_0_68_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian3x3.xhtml" target="_self">CLGaussian3x3</a></td><td class="desc">Basic function to execute gaussian filter 3x3 </td></tr>
<tr id="row_0_69_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian3x3_kernel.xhtml" target="_self">CLGaussian3x3Kernel</a></td><td class="desc">Interface for the Gaussian 3x3 filter kernel </td></tr>
<tr id="row_0_70_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5.xhtml" target="_self">CLGaussian5x5</a></td><td class="desc">Basic function to execute gaussian filter 5x5 </td></tr>
<tr id="row_0_71_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5_hor_kernel.xhtml" target="_self">CLGaussian5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Gaussian filter on a tensor </td></tr>
<tr id="row_0_72_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian5x5_vert_kernel.xhtml" target="_self">CLGaussian5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Gaussian filter on a tensor </td></tr>
<tr id="row_0_73_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid.xhtml" target="_self">CLGaussianPyramid</a></td><td class="desc">Common interface for all Gaussian pyramid functions </td></tr>
<tr id="row_0_74_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_half.xhtml" target="_self">CLGaussianPyramidHalf</a></td><td class="desc">Basic function to execute gaussian pyramid with HALF scale factor </td></tr>
<tr id="row_0_75_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_hor_kernel.xhtml" target="_self">CLGaussianPyramidHorKernel</a></td><td class="desc">OpenCL kernel to perform a Gaussian filter and half scaling across width (horizontal pass) </td></tr>
<tr id="row_0_76_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_orb.xhtml" target="_self">CLGaussianPyramidOrb</a></td><td class="desc">Basic function to execute gaussian pyramid with ORB scale factor </td></tr>
<tr id="row_0_77_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gaussian_pyramid_vert_kernel.xhtml" target="_self">CLGaussianPyramidVertKernel</a></td><td class="desc">OpenCL kernel to perform a Gaussian filter and half scaling across height (vertical pass) </td></tr>
<tr id="row_0_78_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m.xhtml" target="_self">CLGEMM</a></td><td class="desc">Basic function to execute GEMM on OpenCL </td></tr>
<tr id="row_0_79_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_interleave4x4.xhtml" target="_self">CLGEMMInterleave4x4</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel.xhtml" title="OpenCL kernel which interleaves the elements of a matrix A in chunk of 4x4. ">CLGEMMInterleave4x4Kernel</a> </td></tr>
<tr id="row_0_80_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_interleave4x4_kernel.xhtml" target="_self">CLGEMMInterleave4x4Kernel</a></td><td class="desc">OpenCL kernel which interleaves the elements of a matrix A in chunk of 4x4 </td></tr>
<tr id="row_0_81_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp.xhtml" target="_self">CLGEMMLowp</a></td><td class="desc">Basic function to execute GEMMLowp on OpenCL </td></tr>
<tr id="row_0_82_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_lowp_matrix_multiply_kernel.xhtml" target="_self">CLGEMMLowpMatrixMultiplyKernel</a></td><td class="desc">OpenCL kernel to compute low precision matrix multiplication kernel </td></tr>
<tr id="row_0_83_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_accumulate_biases_kernel.xhtml" target="_self">CLGEMMMatrixAccumulateBiasesKernel</a></td><td class="desc">Interface to add a bias to each row of the input tensor </td></tr>
<tr id="row_0_84_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_addition_kernel.xhtml" target="_self">CLGEMMMatrixAdditionKernel</a></td><td class="desc">OpenCL kernel to perform the in-place matrix addition between 2 matrices, taking into account that the second matrix might be weighted by a scalar value beta </td></tr>
<tr id="row_0_85_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_matrix_multiply_kernel.xhtml" target="_self">CLGEMMMatrixMultiplyKernel</a></td><td class="desc">OpenCL kernel to multiply two input matrices "A" and "B" or to multiply a vector "A" by a matrix "B" </td></tr>
<tr id="row_0_86_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_g_e_m_m_transpose1x_w_kernel.xhtml" target="_self">CLGEMMTranspose1xWKernel</a></td><td class="desc">OpenCL kernel which transposes the elements of a matrix in chunks of 1x4 if the input data type is F32 or in chunks of 1x8 if the input data type is F16 </td></tr>
<tr id="row_0_87_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_gradient_kernel.xhtml" target="_self">CLGradientKernel</a></td><td class="desc">OpenCL kernel to perform Gradient computation </td></tr>
<tr id="row_0_88_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_harris_corners.xhtml" target="_self">CLHarrisCorners</a></td><td class="desc">Basic function to execute harris corners detection </td></tr>
<tr id="row_0_89_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_harris_score_kernel.xhtml" target="_self">CLHarrisScoreKernel</a></td><td class="desc">Interface for the harris score kernel </td></tr>
<tr id="row_0_90_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram.xhtml" target="_self">CLHistogram</a></td><td class="desc">Basic function to execute histogram </td></tr>
<tr id="row_0_91_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram_border_kernel.xhtml" target="_self">CLHistogramBorderKernel</a></td><td class="desc">Interface to run the histogram kernel to handle the leftover part of image </td></tr>
<tr id="row_0_92_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_histogram_kernel.xhtml" target="_self">CLHistogramKernel</a></td><td class="desc">Interface to run the histogram kernel </td></tr>
<tr id="row_0_93_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_im2_col_kernel.xhtml" target="_self">CLIm2ColKernel</a></td><td class="desc">Interface for the im2col reshape kernel </td></tr>
<tr id="row_0_94_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image.xhtml" target="_self">CLIntegralImage</a></td><td class="desc">Basic function to execute integral image </td></tr>
<tr id="row_0_95_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image_hor_kernel.xhtml" target="_self">CLIntegralImageHorKernel</a></td><td class="desc">Interface to run the horizontal pass of the integral image kernel </td></tr>
<tr id="row_0_96_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_integral_image_vert_kernel.xhtml" target="_self">CLIntegralImageVertKernel</a></td><td class="desc">Interface to run the vertical pass of the integral image kernel </td></tr>
<tr id="row_0_97_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" target="_self">CLKernelLibrary</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_c_l_kernel_library.xhtml" title="CLKernelLibrary class. ">CLKernelLibrary</a> class </td></tr>
<tr id="row_0_98_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_laplacian_pyramid.xhtml" target="_self">CLLaplacianPyramid</a></td><td class="desc">Basic function to execute laplacian pyramid </td></tr>
<tr id="row_0_99_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_laplacian_reconstruct.xhtml" target="_self">CLLaplacianReconstruct</a></td><td class="desc">Basic function to execute laplacian reconstruction </td></tr>
<tr id="row_0_100_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_l_k_internal_keypoint.xhtml" target="_self">CLLKInternalKeypoint</a></td><td class="desc">Internal keypoint structure for Lucas-Kanade Optical Flow </td></tr>
<tr id="row_0_101_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_finalize_kernel.xhtml" target="_self">CLLKTrackerFinalizeKernel</a></td><td class="desc">Interface to run the finalize step of LKTracker, where it truncates the coordinates stored in new_points array </td></tr>
<tr id="row_0_102_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_init_kernel.xhtml" target="_self">CLLKTrackerInitKernel</a></td><td class="desc">Interface to run the initialization step of LKTracker </td></tr>
<tr id="row_0_103_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage0_kernel.xhtml" target="_self">CLLKTrackerStage0Kernel</a></td><td class="desc">Interface to run the first stage of LKTracker, where A11, A12, A22, min_eig, ival, ixval and iyval are computed </td></tr>
<tr id="row_0_104_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_l_k_tracker_stage1_kernel.xhtml" target="_self">CLLKTrackerStage1Kernel</a></td><td class="desc">Interface to run the second stage of LKTracker, where the motion vectors of the given points are computed </td></tr>
<tr id="row_0_105_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_max_kernel.xhtml" target="_self">CLLogits1DMaxKernel</a></td><td class="desc">Interface for the identifying the max value of 1D Logits </td></tr>
<tr id="row_0_106_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_norm_kernel.xhtml" target="_self">CLLogits1DNormKernel</a></td><td class="desc">Interface for calculating the final step of the Softmax Layer where each logit value is multiplied by the inverse of the sum of the logits </td></tr>
<tr id="row_0_107_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_logits1_d_shift_exp_sum_kernel.xhtml" target="_self">CLLogits1DShiftExpSumKernel</a></td><td class="desc">Interface for shifting the logits values around the max value and exponentiating the result </td></tr>
<tr id="row_0_108_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_lut.xhtml" target="_self">CLLut</a></td><td class="desc">Basic implementation of the OpenCL lut interface </td></tr>
<tr id="row_0_109_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_lut_allocator.xhtml" target="_self">CLLutAllocator</a></td><td class="desc">Basic implementation of a CL memory LUT allocator </td></tr>
<tr id="row_0_110_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_magnitude.xhtml" target="_self">CLMagnitude</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml">CLMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_111_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml" target="_self">CLMagnitudePhaseKernel</a></td><td class="desc">Template interface for the kernel to compute magnitude and phase </td></tr>
<tr id="row_0_112_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev.xhtml" target="_self">CLMeanStdDev</a></td><td class="desc">Basic function to execute mean and standard deviation by calling <a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_kernel.xhtml">CLMeanStdDevKernel</a> </td></tr>
<tr id="row_0_113_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_mean_std_dev_kernel.xhtml" target="_self">CLMeanStdDevKernel</a></td><td class="desc">Interface for the kernel to calculate mean and standard deviation of input image pixels </td></tr>
<tr id="row_0_114_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_median3x3.xhtml" target="_self">CLMedian3x3</a></td><td class="desc">Basic function to execute median filter </td></tr>
<tr id="row_0_115_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_median3x3_kernel.xhtml" target="_self">CLMedian3x3Kernel</a></td><td class="desc">Interface for the median 3x3 filter kernel </td></tr>
<tr id="row_0_116_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_kernel.xhtml" target="_self">CLMinMaxKernel</a></td><td class="desc">Interface for the kernel to perform min max search on an image </td></tr>
<tr id="row_0_117_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_location.xhtml" target="_self">CLMinMaxLocation</a></td><td class="desc">Basic function to execute min and max location </td></tr>
<tr id="row_0_118_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_min_max_location_kernel.xhtml" target="_self">CLMinMaxLocationKernel</a></td><td class="desc">Interface for the kernel to find min max locations of an image </td></tr>
<tr id="row_0_119_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_multi_image.xhtml" target="_self">CLMultiImage</a></td><td class="desc">Basic implementation of the CL multi-planar image interface </td></tr>
<tr id="row_0_120_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_linear_filter.xhtml" target="_self">CLNonLinearFilter</a></td><td class="desc">Basic function to execute non linear filter </td></tr>
<tr id="row_0_121_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_linear_filter_kernel.xhtml" target="_self">CLNonLinearFilterKernel</a></td><td class="desc">Interface for the kernel to apply a non-linear filter </td></tr>
<tr id="row_0_122_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_maxima_suppression3x3.xhtml" target="_self">CLNonMaximaSuppression3x3</a></td><td class="desc">Basic function to execute non-maxima suppression over a 3x3 window </td></tr>
<tr id="row_0_123_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_non_maxima_suppression3x3_kernel.xhtml" target="_self">CLNonMaximaSuppression3x3Kernel</a></td><td class="desc">Interface to perform Non-Maxima suppression over a 3x3 window using OpenCL </td></tr>
<tr id="row_0_124_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalization_layer.xhtml" target="_self">CLNormalizationLayer</a></td><td class="desc">Basic function to simulate a normalization layer </td></tr>
<tr id="row_0_125_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_normalization_layer_kernel.xhtml" target="_self">CLNormalizationLayerKernel</a></td><td class="desc">Interface for the normalization layer kernel </td></tr>
<tr id="row_0_126_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_c_l_old_value.xhtml" target="_self">CLOldValue</a></td><td class="desc">Structure for storing ival, ixval and iyval for each point inside the window </td></tr>
<tr id="row_0_127_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_optical_flow.xhtml" target="_self">CLOpticalFlow</a></td><td class="desc">Basic function to execute optical flow </td></tr>
<tr id="row_0_128_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_phase.xhtml" target="_self">CLPhase</a></td><td class="desc">Basic function to execute an <a class="el" href="classarm__compute_1_1_c_l_magnitude_phase_kernel.xhtml">CLMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_129_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication.xhtml" target="_self">CLPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml">CLPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_130_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pixel_wise_multiplication_kernel.xhtml" target="_self">CLPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the pixelwise multiplication kernel </td></tr>
<tr id="row_0_131_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pooling_layer.xhtml" target="_self">CLPoolingLayer</a></td><td class="desc">Basic function to simulate a pooling layer with the specified pooling operation </td></tr>
<tr id="row_0_132_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pooling_layer_kernel.xhtml" target="_self">CLPoolingLayerKernel</a></td><td class="desc">Interface for the pooling layer kernel </td></tr>
<tr id="row_0_133_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_pyramid.xhtml" target="_self">CLPyramid</a></td><td class="desc">Basic implementation of the OpenCL pyramid interface </td></tr>
<tr id="row_0_134_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_remap.xhtml" target="_self">CLRemap</a></td><td class="desc">Basic function to execute remap </td></tr>
<tr id="row_0_135_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_remap_kernel.xhtml" target="_self">CLRemapKernel</a></td><td class="desc">OpenCL kernel to perform a remap on a tensor </td></tr>
<tr id="row_0_136_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scale.xhtml" target="_self">CLScale</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_scale_kernel.xhtml">CLScaleKernel</a> </td></tr>
<tr id="row_0_137_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scale_kernel.xhtml" target="_self">CLScaleKernel</a></td><td class="desc">Interface for the warp affine kernel </td></tr>
<tr id="row_0_138_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scharr3x3.xhtml" target="_self">CLScharr3x3</a></td><td class="desc">Basic function to execute scharr 3x3 filter </td></tr>
<tr id="row_0_139_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scharr3x3_kernel.xhtml" target="_self">CLScharr3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Scharr filter on a tensor </td></tr>
<tr id="row_0_140_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_scheduler.xhtml" target="_self">CLScheduler</a></td><td class="desc">Provides global access to a CL context and command queue </td></tr>
<tr id="row_0_141_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_separable_convolution_hor_kernel.xhtml" target="_self">CLSeparableConvolutionHorKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the Horizontal pass of a Separable Convolution </td></tr>
<tr id="row_0_142_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_separable_convolution_vert_kernel.xhtml" target="_self">CLSeparableConvolutionVertKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the Vertical pass of a Separable Convolution </td></tr>
<tr id="row_0_143_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel3x3.xhtml" target="_self">CLSobel3x3</a></td><td class="desc">Basic function to execute sobel 3x3 filter </td></tr>
<tr id="row_0_144_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel3x3_kernel.xhtml" target="_self">CLSobel3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Sobel filter on a tensor </td></tr>
<tr id="row_0_145_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5.xhtml" target="_self">CLSobel5x5</a></td><td class="desc">Basic function to execute sobel 5x5 filter </td></tr>
<tr id="row_0_146_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5_hor_kernel.xhtml" target="_self">CLSobel5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_147_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel5x5_vert_kernel.xhtml" target="_self">CLSobel5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_148_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7.xhtml" target="_self">CLSobel7x7</a></td><td class="desc">Basic function to execute sobel 7x7 filter </td></tr>
<tr id="row_0_149_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7_hor_kernel.xhtml" target="_self">CLSobel7x7HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_150_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_sobel7x7_vert_kernel.xhtml" target="_self">CLSobel7x7VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_151_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_softmax_layer.xhtml" target="_self">CLSoftmaxLayer</a></td><td class="desc">Basic function to compute a SoftmaxLayer </td></tr>
<tr id="row_0_152_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_table_lookup.xhtml" target="_self">CLTableLookup</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_table_lookup_kernel.xhtml">CLTableLookupKernel</a> </td></tr>
<tr id="row_0_153_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_table_lookup_kernel.xhtml" target="_self">CLTableLookupKernel</a></td><td class="desc">Interface for the kernel to perform table lookup calculations </td></tr>
<tr id="row_0_154_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tensor.xhtml" target="_self">CLTensor</a></td><td class="desc">Basic implementation of the OpenCL tensor interface </td></tr>
<tr id="row_0_155_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_tensor_allocator.xhtml" target="_self">CLTensorAllocator</a></td><td class="desc">Basic implementation of a CL memory tensor allocator </td></tr>
<tr id="row_0_156_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_threshold.xhtml" target="_self">CLThreshold</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_threshold_kernel.xhtml">CLThresholdKernel</a> </td></tr>
<tr id="row_0_157_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_threshold_kernel.xhtml" target="_self">CLThresholdKernel</a></td><td class="desc">Interface for the thresholding kernel </td></tr>
<tr id="row_0_158_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_transpose.xhtml" target="_self">CLTranspose</a></td><td class="desc">Basic function to transpose a matrix on OpenCL </td></tr>
<tr id="row_0_159_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_transpose_kernel.xhtml" target="_self">CLTransposeKernel</a></td><td class="desc">OpenCL kernel which transposes the elements of a matrix </td></tr>
<tr id="row_0_160_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_affine.xhtml" target="_self">CLWarpAffine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_warp_affine_kernel.xhtml">CLWarpAffineKernel</a> for AFFINE transformation </td></tr>
<tr id="row_0_161_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_affine_kernel.xhtml" target="_self">CLWarpAffineKernel</a></td><td class="desc">Interface for the warp affine kernel </td></tr>
<tr id="row_0_162_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_perspective.xhtml" target="_self">CLWarpPerspective</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_c_l_warp_perspective_kernel.xhtml">CLWarpPerspectiveKernel</a> for PERSPECTIVE transformation </td></tr>
<tr id="row_0_163_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_l_warp_perspective_kernel.xhtml" target="_self">CLWarpPerspectiveKernel</a></td><td class="desc">Interface for the warp perspective kernel </td></tr>
<tr id="row_0_164_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_coordinates.xhtml" target="_self">Coordinates</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_coordinates.xhtml" title="Coordinates of an item. ">Coordinates</a> of an item </td></tr>
<tr id="row_0_165_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_coordinates2_d.xhtml" target="_self">Coordinates2D</a></td><td class="desc">Coordinate type </td></tr>
<tr id="row_0_166_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_coordinates3_d.xhtml" target="_self">Coordinates3D</a></td><td class="desc">Coordinate type </td></tr>
<tr id="row_0_167_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_corner_candidates_kernel.xhtml" target="_self">CPPCornerCandidatesKernel</a></td><td class="desc">CPP kernel to perform corner candidates </td></tr>
<tr id="row_0_168_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_scheduler.xhtml" target="_self">CPPScheduler</a></td><td class="desc">Pool of threads to automatically split a kernel's execution among several threads </td></tr>
<tr id="row_0_169_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_c_p_p_sort_euclidean_distance_kernel.xhtml" target="_self">CPPSortEuclideanDistanceKernel</a></td><td class="desc">CPP kernel to perform sorting and euclidean distance </td></tr>
<tr id="row_0_170_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_detection_window.xhtml" target="_self">DetectionWindow</a></td><td class="desc">Detection window used for the object detection </td></tr>
<tr id="row_0_171_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_dimensions.xhtml" target="_self">Dimensions</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_dimensions.xhtml" title="Dimensions with dimensionality. ">Dimensions</a> with dimensionality </td></tr>
<tr id="row_0_172_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_distribution1_d.xhtml" target="_self">Distribution1D</a></td><td class="desc">Basic implementation of the 1D distribution interface </td></tr>
<tr id="row_0_173_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_h_o_g.xhtml" target="_self">HOG</a></td><td class="desc">CPU implementation of <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> data-object </td></tr>
<tr id="row_0_174_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_h_o_g_info.xhtml" target="_self">HOGInfo</a></td><td class="desc">Store the <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a>'s metadata </td></tr>
<tr id="row_0_175_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_access_window.xhtml" target="_self">IAccessWindow</a></td><td class="desc">Interface describing methods to update access window and padding based on kernel parameters </td></tr>
<tr id="row_0_176_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_array.xhtml" target="_self">IArray</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values...">Array</a> of type T </td></tr>
<tr id="row_0_177_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_array.xhtml" target="_self">ICLArray</a></td><td class="desc">Interface for OpenCL <a class="el" href="classarm__compute_1_1_array.xhtml" title="Basic implementation of the IArray interface which allocates a static number of T values...">Array</a> </td></tr>
<tr id="row_0_178_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_distribution1_d.xhtml" target="_self">ICLDistribution1D</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_i_c_l_distribution1_d.xhtml" title="ICLDistribution1D interface class. ">ICLDistribution1D</a> interface class </td></tr>
<tr id="row_0_179_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_kernel.xhtml" target="_self">ICLKernel</a></td><td class="desc">Common interface for all the OpenCL kernels </td></tr>
<tr id="row_0_180_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_lut.xhtml" target="_self">ICLLut</a></td><td class="desc">Interface for OpenCL LUT </td></tr>
<tr id="row_0_181_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_multi_image.xhtml" target="_self">ICLMultiImage</a></td><td class="desc">Interface for OpenCL multi-planar images </td></tr>
<tr id="row_0_182_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple2_d_kernel.xhtml" target="_self">ICLSimple2DKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_183_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple3_d_kernel.xhtml" target="_self">ICLSimple3DKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_184_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple_function.xhtml" target="_self">ICLSimpleFunction</a></td><td class="desc">Basic interface for functions which have a single OpenCL kernel </td></tr>
<tr id="row_0_185_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_simple_kernel.xhtml" target="_self">ICLSimpleKernel</a></td><td class="desc">Interface for simple OpenCL kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_186_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_l_tensor.xhtml" target="_self">ICLTensor</a></td><td class="desc">Interface for OpenCL tensor </td></tr>
<tr id="row_0_187_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_p_p_kernel.xhtml" target="_self">ICPPKernel</a></td><td class="desc">Common interface for all kernels implemented in C++ </td></tr>
<tr id="row_0_188_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_c_p_p_simple_kernel.xhtml" target="_self">ICPPSimpleKernel</a></td><td class="desc">Interface for simple NEON kernels having 1 tensor input and 1 tensor output </td></tr>
<tr id="row_0_189_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_distribution.xhtml" target="_self">IDistribution</a></td><td class="desc">Interface for distribution objects </td></tr>
<tr id="row_0_190_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_distribution1_d.xhtml" target="_self">IDistribution1D</a></td><td class="desc">1D Distribution interface </td></tr>
<tr id="row_0_191_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_function.xhtml" target="_self">IFunction</a></td><td class="desc">Base class for all functions </td></tr>
<tr id="row_0_192_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_h_o_g.xhtml" target="_self">IHOG</a></td><td class="desc">Interface for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> data-object </td></tr>
<tr id="row_0_193_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_kernel.xhtml" target="_self">IKernel</a></td><td class="desc">Common information for all the kernels </td></tr>
<tr id="row_0_194_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_lut.xhtml" target="_self">ILut</a></td><td class="desc">Lookup Table object interface </td></tr>
<tr id="row_0_195_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_lut_allocator.xhtml" target="_self">ILutAllocator</a></td><td class="desc">Basic interface to allocate LUTs' </td></tr>
<tr id="row_0_196_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_multi_h_o_g.xhtml" target="_self">IMultiHOG</a></td><td class="desc">Interface for storing multiple <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> data-objects </td></tr>
<tr id="row_0_197_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_multi_image.xhtml" target="_self">IMultiImage</a></td><td class="desc">Interface for multi-planar images </td></tr>
<tr id="row_0_198_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_harris_score_kernel.xhtml" target="_self">INEHarrisScoreKernel</a></td><td class="desc">Common interface for all Harris Score kernels </td></tr>
<tr id="row_0_199_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_simple_function.xhtml" target="_self">INESimpleFunction</a></td><td class="desc">Basic interface for functions which have a single NEON kernel </td></tr>
<tr id="row_0_200_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_n_e_warp_kernel.xhtml" target="_self">INEWarpKernel</a></td><td class="desc">Common interface for warp affine and warp perspective </td></tr>
<tr id="row_0_201_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_i_o_format_info.xhtml" target="_self">IOFormatInfo</a></td><td class="desc">IO formatting information class </td></tr>
<tr id="row_0_202_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_pyramid.xhtml" target="_self">IPyramid</a></td><td class="desc">Interface for pyramid data-object </td></tr>
<tr id="row_0_203_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_tensor.xhtml" target="_self">ITensor</a></td><td class="desc">Interface for NEON tensor </td></tr>
<tr id="row_0_204_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_i_tensor_allocator.xhtml" target="_self">ITensorAllocator</a></td><td class="desc">Interface to allocate tensors </td></tr>
<tr id="row_0_205_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_iterator.xhtml" target="_self">Iterator</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_iterator.xhtml" title="Iterator updated by execute_window_loop for each window element. ">Iterator</a> updated by <a class="el" href="namespacearm__compute.xhtml#a78fd1c0056e9add7ab01b8e118c0038d">execute_window_loop</a> for each window element </td></tr>
<tr id="row_0_206_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_kernel.xhtml" target="_self">Kernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> class </td></tr>
<tr id="row_0_207_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_key_point.xhtml" target="_self">KeyPoint</a></td><td class="desc"><a class="el" href="struct_keypoint.xhtml">Keypoint</a> type </td></tr>
<tr id="row_0_208_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_lut.xhtml" target="_self">Lut</a></td><td class="desc">Basic implementation of the LUT interface </td></tr>
<tr id="row_0_209_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_lut_allocator.xhtml" target="_self">LutAllocator</a></td><td class="desc">Basic implementation of a CPU memory LUT allocator </td></tr>
<tr id="row_0_210_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_h_o_g.xhtml" target="_self">MultiHOG</a></td><td class="desc">CPU implementation of multi <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> data-object </td></tr>
<tr id="row_0_211_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_image.xhtml" target="_self">MultiImage</a></td><td class="desc">Basic implementation of the multi-planar image interface </td></tr>
<tr id="row_0_212_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_multi_image_info.xhtml" target="_self">MultiImageInfo</a></td><td class="desc">Store the multi-planar image's metadata </td></tr>
<tr id="row_0_213_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_absolute_difference.xhtml" target="_self">NEAbsoluteDifference</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_absolute_difference_kernel.xhtml">NEAbsoluteDifferenceKernel</a> </td></tr>
<tr id="row_0_214_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_absolute_difference_kernel.xhtml" target="_self">NEAbsoluteDifferenceKernel</a></td><td class="desc">Interface for the absolute difference kernel </td></tr>
<tr id="row_0_215_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate.xhtml" target="_self">NEAccumulate</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_kernel.xhtml">NEAccumulateKernel</a> </td></tr>
<tr id="row_0_216_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_kernel.xhtml" target="_self">NEAccumulateKernel</a></td><td class="desc">Interface for the accumulate kernel </td></tr>
<tr id="row_0_217_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_squared.xhtml" target="_self">NEAccumulateSquared</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_squared_kernel.xhtml">NEAccumulateSquaredKernel</a> </td></tr>
<tr id="row_0_218_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_squared_kernel.xhtml" target="_self">NEAccumulateSquaredKernel</a></td><td class="desc">Interface for the accumulate squared kernel </td></tr>
<tr id="row_0_219_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted.xhtml" target="_self">NEAccumulateWeighted</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted_kernel.xhtml">NEAccumulateWeightedKernel</a> </td></tr>
<tr id="row_0_220_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted_f_p16_kernel.xhtml" target="_self">NEAccumulateWeightedFP16Kernel</a></td><td class="desc">Interface for the accumulate weighted kernel using F16 </td></tr>
<tr id="row_0_221_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_accumulate_weighted_kernel.xhtml" target="_self">NEAccumulateWeightedKernel</a></td><td class="desc">Interface for the accumulate weighted kernel </td></tr>
<tr id="row_0_222_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_activation_layer.xhtml" target="_self">NEActivationLayer</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_activation_layer_kernel.xhtml">NEActivationLayerKernel</a> </td></tr>
<tr id="row_0_223_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_activation_layer_kernel.xhtml" target="_self">NEActivationLayerKernel</a></td><td class="desc">Interface for the activation layer kernel </td></tr>
<tr id="row_0_224_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition.xhtml" target="_self">NEArithmeticAddition</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition_kernel.xhtml">NEArithmeticAdditionKernel</a> </td></tr>
<tr id="row_0_225_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_addition_kernel.xhtml" target="_self">NEArithmeticAdditionKernel</a></td><td class="desc">Interface for the kernel to perform addition between two tensors </td></tr>
<tr id="row_0_226_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction.xhtml" target="_self">NEArithmeticSubtraction</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction_kernel.xhtml">NEArithmeticSubtractionKernel</a> </td></tr>
<tr id="row_0_227_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_arithmetic_subtraction_kernel.xhtml" target="_self">NEArithmeticSubtractionKernel</a></td><td class="desc">Interface for the kernel to perform subtraction between two tensors </td></tr>
<tr id="row_0_228_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_and.xhtml" target="_self">NEBitwiseAnd</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml">NEBitwiseAndKernel</a> </td></tr>
<tr id="row_0_229_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_and_kernel.xhtml" target="_self">NEBitwiseAndKernel</a></td><td class="desc">Interface for the kernel to perform bitwise AND between XY-planes of two tensors </td></tr>
<tr id="row_0_230_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_not.xhtml" target="_self">NEBitwiseNot</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml">NEBitwiseNotKernel</a> </td></tr>
<tr id="row_0_231_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_not_kernel.xhtml" target="_self">NEBitwiseNotKernel</a></td><td class="desc">Interface for the kernel to perform bitwise NOT operation </td></tr>
<tr id="row_0_232_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_or.xhtml" target="_self">NEBitwiseOr</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml">NEBitwiseOrKernel</a> </td></tr>
<tr id="row_0_233_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_or_kernel.xhtml" target="_self">NEBitwiseOrKernel</a></td><td class="desc">Interface for the kernel to perform bitwise inclusive OR between two tensors </td></tr>
<tr id="row_0_234_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor.xhtml" target="_self">NEBitwiseXor</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml">NEBitwiseXorKernel</a> </td></tr>
<tr id="row_0_235_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_bitwise_xor_kernel.xhtml" target="_self">NEBitwiseXorKernel</a></td><td class="desc">Interface for the kernel to perform bitwise exclusive OR (XOR) between two tensors </td></tr>
<tr id="row_0_236_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_box3x3.xhtml" target="_self">NEBox3x3</a></td><td class="desc">Basic function to execute box filter 3x3 </td></tr>
<tr id="row_0_237_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_box3x3_f_p16_kernel.xhtml" target="_self">NEBox3x3FP16Kernel</a></td><td class="desc">NEON kernel to perform a Box 3x3 filter using F16 simd </td></tr>
<tr id="row_0_238_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_box3x3_kernel.xhtml" target="_self">NEBox3x3Kernel</a></td><td class="desc">NEON kernel to perform a Box 3x3 filter </td></tr>
<tr id="row_0_239_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_canny_edge.xhtml" target="_self">NECannyEdge</a></td><td class="desc">Basic function to execute canny edge on NEON </td></tr>
<tr id="row_0_240_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_combine.xhtml" target="_self">NEChannelCombine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_combine_kernel.xhtml">NEChannelCombineKernel</a> to perform channel combination </td></tr>
<tr id="row_0_241_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_combine_kernel.xhtml" target="_self">NEChannelCombineKernel</a></td><td class="desc">Interface for the channel combine kernel </td></tr>
<tr id="row_0_242_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_extract.xhtml" target="_self">NEChannelExtract</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_channel_extract_kernel.xhtml">NEChannelExtractKernel</a> to perform channel extraction </td></tr>
<tr id="row_0_243_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_channel_extract_kernel.xhtml" target="_self">NEChannelExtractKernel</a></td><td class="desc">Interface for the channel extract kernel </td></tr>
<tr id="row_0_244_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_col2_im_kernel.xhtml" target="_self">NECol2ImKernel</a></td><td class="desc">NEON kernel to perform col2im reshaping </td></tr>
<tr id="row_0_245_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_color_convert.xhtml" target="_self">NEColorConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_color_convert_kernel.xhtml">NEColorConvertKernel</a> to perform color conversion </td></tr>
<tr id="row_0_246_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_color_convert_kernel.xhtml" target="_self">NEColorConvertKernel</a></td><td class="desc">Interface for the color convert kernel </td></tr>
<tr id="row_0_247_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution3x3.xhtml" target="_self">NEConvolution3x3</a></td><td class="desc">Basic function to execute convolution of size 3x3 </td></tr>
<tr id="row_0_248_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_kernel.xhtml" target="_self">NEConvolutionKernel</a></td><td class="desc">Interface for the kernel to run an arbitrary size convolution on a tensor </td></tr>
<tr id="row_0_249_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_layer.xhtml" target="_self">NEConvolutionLayer</a></td><td class="desc">Basic function to simulate a convolution layer </td></tr>
<tr id="row_0_250_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_layer_weights_reshape_kernel.xhtml" target="_self">NEConvolutionLayerWeightsReshapeKernel</a></td><td class="desc">NEON kernel to perform reshaping on the weights used by convolution layer </td></tr>
<tr id="row_0_251_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_rectangle.xhtml" target="_self">NEConvolutionRectangle</a></td><td class="desc">Basic function to execute non-square convolution </td></tr>
<tr id="row_0_252_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_rectangle_kernel.xhtml" target="_self">NEConvolutionRectangleKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the running convolution on a rectangle matrix </td></tr>
<tr id="row_0_253_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_convolution_square.xhtml" target="_self">NEConvolutionSquare</a></td><td class="desc">Basic function to execute convolution of size 5x5, 7x7, 9x9 </td></tr>
<tr id="row_0_254_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_cumulative_distribution_kernel.xhtml" target="_self">NECumulativeDistributionKernel</a></td><td class="desc">Interface for the cumulative distribution (cummulative summmation) calculation kernel </td></tr>
<tr id="row_0_255_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_convert.xhtml" target="_self">NEDepthConvert</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_depth_convert_kernel.xhtml">NEDepthConvertKernel</a> </td></tr>
<tr id="row_0_256_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_depth_convert_kernel.xhtml" target="_self">NEDepthConvertKernel</a></td><td class="desc">Depth conversion kernel </td></tr>
<tr id="row_0_257_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_derivative.xhtml" target="_self">NEDerivative</a></td><td class="desc">Basic function to execute first order derivative operator </td></tr>
<tr id="row_0_258_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_derivative_kernel.xhtml" target="_self">NEDerivativeKernel</a></td><td class="desc">Interface for the kernel to run the derivative along the X/Y directions on a tensor </td></tr>
<tr id="row_0_259_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dilate.xhtml" target="_self">NEDilate</a></td><td class="desc">Basic function to execute dilate </td></tr>
<tr id="row_0_260_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_dilate_kernel.xhtml" target="_self">NEDilateKernel</a></td><td class="desc">Interface for the kernel to perform boolean image dilatation </td></tr>
<tr id="row_0_261_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_edge_non_max_suppression_kernel.xhtml" target="_self">NEEdgeNonMaxSuppressionKernel</a></td><td class="desc">NEON kernel to perform Non-Maxima suppression for Canny Edge </td></tr>
<tr id="row_0_262_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_edge_trace_kernel.xhtml" target="_self">NEEdgeTraceKernel</a></td><td class="desc">NEON kernel to perform Edge tracing </td></tr>
<tr id="row_0_263_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_equalize_histogram.xhtml" target="_self">NEEqualizeHistogram</a></td><td class="desc">Basic function to execute histogram equalization </td></tr>
<tr id="row_0_264_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_erode.xhtml" target="_self">NEErode</a></td><td class="desc">Basic function to execute erode </td></tr>
<tr id="row_0_265_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_erode_kernel.xhtml" target="_self">NEErodeKernel</a></td><td class="desc">Interface for the kernel to perform boolean image erosion </td></tr>
<tr id="row_0_266_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fast_corners.xhtml" target="_self">NEFastCorners</a></td><td class="desc">Basic function to execute fast corners </td></tr>
<tr id="row_0_267_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fast_corners_kernel.xhtml" target="_self">NEFastCornersKernel</a></td><td class="desc">NEON kernel to perform fast corners </td></tr>
<tr id="row_0_268_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_array_kernel.xhtml" target="_self">NEFillArrayKernel</a></td><td class="desc">This kernel adds all texels greater than or equal to the threshold value to the keypoint array </td></tr>
<tr id="row_0_269_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_border.xhtml" target="_self">NEFillBorder</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml">NEFillBorderKernel</a> </td></tr>
<tr id="row_0_270_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_border_kernel.xhtml" target="_self">NEFillBorderKernel</a></td><td class="desc">Interface for the kernel to fill borders </td></tr>
<tr id="row_0_271_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fill_inner_border_kernel.xhtml" target="_self">NEFillInnerBorderKernel</a></td><td class="desc">Interface for the kernel to fill the interior borders </td></tr>
<tr id="row_0_272_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_fully_connected_layer.xhtml" target="_self">NEFullyConnectedLayer</a></td><td class="desc">Basic function to compute a Fully Connected layer on NEON </td></tr>
<tr id="row_0_273_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian3x3.xhtml" target="_self">NEGaussian3x3</a></td><td class="desc">Basic function to execute gaussian filter 3x3 </td></tr>
<tr id="row_0_274_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian3x3_kernel.xhtml" target="_self">NEGaussian3x3Kernel</a></td><td class="desc">NEON kernel to perform a Gaussian 3x3 filter </td></tr>
<tr id="row_0_275_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5.xhtml" target="_self">NEGaussian5x5</a></td><td class="desc">Basic function to execute gaussian filter 5x5 </td></tr>
<tr id="row_0_276_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5_hor_kernel.xhtml" target="_self">NEGaussian5x5HorKernel</a></td><td class="desc">NEON kernel to perform a Gaussian 5x5 filter (horizontal pass) </td></tr>
<tr id="row_0_277_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian5x5_vert_kernel.xhtml" target="_self">NEGaussian5x5VertKernel</a></td><td class="desc">NEON kernel to perform a Gaussian 5x5 filter (vertical pass) </td></tr>
<tr id="row_0_278_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid.xhtml" target="_self">NEGaussianPyramid</a></td><td class="desc">Common interface for all Gaussian pyramid functions </td></tr>
<tr id="row_0_279_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_half.xhtml" target="_self">NEGaussianPyramidHalf</a></td><td class="desc">Basic function to execute gaussian pyramid with HALF scale factor </td></tr>
<tr id="row_0_280_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_hor_kernel.xhtml" target="_self">NEGaussianPyramidHorKernel</a></td><td class="desc">NEON kernel to perform a GaussianPyramid (horizontal pass) </td></tr>
<tr id="row_0_281_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_orb.xhtml" target="_self">NEGaussianPyramidOrb</a></td><td class="desc">Basic function to execute gaussian pyramid with ORB scale factor </td></tr>
<tr id="row_0_282_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gaussian_pyramid_vert_kernel.xhtml" target="_self">NEGaussianPyramidVertKernel</a></td><td class="desc">NEON kernel to perform a GaussianPyramid (vertical pass) </td></tr>
<tr id="row_0_283_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m.xhtml" target="_self">NEGEMM</a></td><td class="desc">Basic function to execute GEMM on NEON </td></tr>
<tr id="row_0_284_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4.xhtml" target="_self">NEGEMMInterleave4x4</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel.xhtml" title="NEON kernel to interleave the elements of a matrix. ">NEGEMMInterleave4x4Kernel</a> </td></tr>
<tr id="row_0_285_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_interleave4x4_kernel.xhtml" target="_self">NEGEMMInterleave4x4Kernel</a></td><td class="desc">NEON kernel to interleave the elements of a matrix </td></tr>
<tr id="row_0_286_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp.xhtml" target="_self">NEGEMMLowp</a></td><td class="desc">Basic function to execute GEMMLowp on NEON </td></tr>
<tr id="row_0_287_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_lowp_matrix_multiply_kernel.xhtml" target="_self">NEGEMMLowpMatrixMultiplyKernel</a></td><td class="desc">NEON kernel to multiply matrices </td></tr>
<tr id="row_0_288_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_accumulate_biases_kernel.xhtml" target="_self">NEGEMMMatrixAccumulateBiasesKernel</a></td><td class="desc">NEON kernel to add a bias to each row of the input tensor </td></tr>
<tr id="row_0_289_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_addition_kernel.xhtml" target="_self">NEGEMMMatrixAdditionKernel</a></td><td class="desc">NEON kernel to perform the in-place matrix addition between 2 matrices taking into account that the second matrix might be weighted by a scalar value beta: </td></tr>
<tr id="row_0_290_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_matrix_multiply_kernel.xhtml" target="_self">NEGEMMMatrixMultiplyKernel</a></td><td class="desc">NEON kernel to multiply two input matrices "A" and "B" </td></tr>
<tr id="row_0_291_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w.xhtml" target="_self">NEGEMMTranspose1xW</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel.xhtml" title="NEON kernel which transposes the elements of a matrix in chunks of 1x4 if the input data type is F32 ...">NEGEMMTranspose1xWKernel</a> </td></tr>
<tr id="row_0_292_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_g_e_m_m_transpose1x_w_kernel.xhtml" target="_self">NEGEMMTranspose1xWKernel</a></td><td class="desc">NEON kernel which transposes the elements of a matrix in chunks of 1x4 if the input data type is F32 or in chunks of 1x8 if the input data type is F16 </td></tr>
<tr id="row_0_293_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gradient_f_p16_kernel.xhtml" target="_self">NEGradientFP16Kernel</a></td><td class="desc">NEON kernel to perform Gradient computation </td></tr>
<tr id="row_0_294_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_gradient_kernel.xhtml" target="_self">NEGradientKernel</a></td><td class="desc">Computes magnitude and quantised phase from inputs gradients </td></tr>
<tr id="row_0_295_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_harris_corners.xhtml" target="_self">NEHarrisCorners</a></td><td class="desc">Basic function to execute harris corners detection </td></tr>
<tr id="row_0_296_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_harris_score_f_p16_kernel.xhtml" target="_self">NEHarrisScoreFP16Kernel</a></td><td class="desc">Interface for the accumulate Weighted kernel using F16 </td></tr>
<tr id="row_0_297_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_harris_score_kernel.xhtml" target="_self">NEHarrisScoreKernel</a></td><td class="desc">Template NEON kernel to perform Harris Score </td></tr>
<tr id="row_0_298_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_histogram.xhtml" target="_self">NEHistogram</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_histogram_kernel.xhtml">NEHistogramKernel</a> </td></tr>
<tr id="row_0_299_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_histogram_kernel.xhtml" target="_self">NEHistogramKernel</a></td><td class="desc">Interface for the histogram kernel </td></tr>
<tr id="row_0_300_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_block_normalization_kernel.xhtml" target="_self">NEHOGBlockNormalizationKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> block normalization </td></tr>
<tr id="row_0_301_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_descriptor.xhtml" target="_self">NEHOGDescriptor</a></td><td class="desc">Basic function to calculate <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> descriptor </td></tr>
<tr id="row_0_302_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_detector.xhtml" target="_self">NEHOGDetector</a></td><td class="desc">Basic function to execute <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> detector based on linear SVM </td></tr>
<tr id="row_0_303_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_detector_kernel.xhtml" target="_self">NEHOGDetectorKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> detector kernel using linear SVM </td></tr>
<tr id="row_0_304_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_gradient.xhtml" target="_self">NEHOGGradient</a></td><td class="desc">Basic function to calculate the gradient for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> </td></tr>
<tr id="row_0_305_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_multi_detection.xhtml" target="_self">NEHOGMultiDetection</a></td><td class="desc">Basic function to detect multiple objects (or the same object at different scales) on the same input image using <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> </td></tr>
<tr id="row_0_306_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_non_maxima_suppression_kernel.xhtml" target="_self">NEHOGNonMaximaSuppressionKernel</a></td><td class="desc">NEON kernel to perform in-place computation of euclidean distance based non-maxima suppression for <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> </td></tr>
<tr id="row_0_307_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_h_o_g_orientation_binning_kernel.xhtml" target="_self">NEHOGOrientationBinningKernel</a></td><td class="desc">NEON kernel to perform <a class="el" href="classarm__compute_1_1_h_o_g.xhtml" title="CPU implementation of HOG data-object. ">HOG</a> Orientation Binning </td></tr>
<tr id="row_0_308_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_im2_col_kernel.xhtml" target="_self">NEIm2ColKernel</a></td><td class="desc">Interface for the im2col reshape kernel </td></tr>
<tr id="row_0_309_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_integral_image.xhtml" target="_self">NEIntegralImage</a></td><td class="desc">Basic function to run a <a class="el" href="classarm__compute_1_1_n_e_integral_image_kernel.xhtml">NEIntegralImageKernel</a> </td></tr>
<tr id="row_0_310_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_integral_image_kernel.xhtml" target="_self">NEIntegralImageKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform an image integral on an image </td></tr>
<tr id="row_0_311_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_laplacian_pyramid.xhtml" target="_self">NELaplacianPyramid</a></td><td class="desc">Basic function to execute laplacian pyramid </td></tr>
<tr id="row_0_312_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_laplacian_reconstruct.xhtml" target="_self">NELaplacianReconstruct</a></td><td class="desc">Basic function to execute laplacian reconstruction </td></tr>
<tr id="row_0_313_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_n_e_l_k_internal_keypoint.xhtml" target="_self">NELKInternalKeypoint</a></td><td class="desc">Internal keypoint class for Lucas-Kanade Optical Flow </td></tr>
<tr id="row_0_314_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_l_k_tracker_kernel.xhtml" target="_self">NELKTrackerKernel</a></td><td class="desc">Interface for the Lucas-Kanade tracker kernel </td></tr>
<tr id="row_0_315_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_logits1_d_max_kernel.xhtml" target="_self">NELogits1DMaxKernel</a></td><td class="desc">Interface for the identifying the max value of 1D Logits </td></tr>
<tr id="row_0_316_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_logits1_d_norm_kernel.xhtml" target="_self">NELogits1DNormKernel</a></td><td class="desc">Interface for calculating the final step of the Softmax Layer where each logit value is multiplied by the inverse of the sum of the logits </td></tr>
<tr id="row_0_317_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_logits1_d_shift_exp_sum_kernel.xhtml" target="_self">NELogits1DShiftExpSumKernel</a></td><td class="desc">Interface for shifting the logits values around the max value and exponentiating the result </td></tr>
<tr id="row_0_318_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_magnitude.xhtml" target="_self">NEMagnitude</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml" title="Template interface for the kernel to compute magnitude and phase. ">NEMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_319_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_f_p16_kernel.xhtml" target="_self">NEMagnitudePhaseFP16Kernel</a></td><td class="desc">Template interface for the kernel to compute magnitude and phase </td></tr>
<tr id="row_0_320_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml" target="_self">NEMagnitudePhaseKernel</a></td><td class="desc">Template interface for the kernel to compute magnitude and phase </td></tr>
<tr id="row_0_321_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev.xhtml" target="_self">NEMeanStdDev</a></td><td class="desc">Basic function to execute mean and std deviation </td></tr>
<tr id="row_0_322_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_mean_std_dev_kernel.xhtml" target="_self">NEMeanStdDevKernel</a></td><td class="desc">Interface for the kernel to calculate mean and standard deviation of input image pixels </td></tr>
<tr id="row_0_323_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_median3x3.xhtml" target="_self">NEMedian3x3</a></td><td class="desc">Basic function to execute median filter </td></tr>
<tr id="row_0_324_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_median3x3_kernel.xhtml" target="_self">NEMedian3x3Kernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> to perform a median filter on a tensor </td></tr>
<tr id="row_0_325_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_kernel.xhtml" target="_self">NEMinMaxKernel</a></td><td class="desc">Interface for the kernel to perform min max search on an image </td></tr>
<tr id="row_0_326_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_location.xhtml" target="_self">NEMinMaxLocation</a></td><td class="desc">Basic function to execute min and max location </td></tr>
<tr id="row_0_327_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_min_max_location_kernel.xhtml" target="_self">NEMinMaxLocationKernel</a></td><td class="desc">Interface for the kernel to find min max locations of an image </td></tr>
<tr id="row_0_328_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_linear_filter.xhtml" target="_self">NENonLinearFilter</a></td><td class="desc">Basic function to execute non linear filter </td></tr>
<tr id="row_0_329_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_linear_filter_kernel.xhtml" target="_self">NENonLinearFilterKernel</a></td><td class="desc">Interface for the kernel to apply a non-linear filter </td></tr>
<tr id="row_0_330_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_maxima_suppression3x3.xhtml" target="_self">NENonMaximaSuppression3x3</a></td><td class="desc">Basic function to execute non-maxima suppression over a 3x3 window </td></tr>
<tr id="row_0_331_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_maxima_suppression3x3_f_p16_kernel.xhtml" target="_self">NENonMaximaSuppression3x3FP16Kernel</a></td><td class="desc">NEON kernel to perform Non-Maxima suppression 3x3 with intermediate results in F16 if the input data type is F32 </td></tr>
<tr id="row_0_332_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_non_maxima_suppression3x3_kernel.xhtml" target="_self">NENonMaximaSuppression3x3Kernel</a></td><td class="desc">Interface to perform Non-Maxima suppression over a 3x3 window using NEON </td></tr>
<tr id="row_0_333_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_normalization_layer.xhtml" target="_self">NENormalizationLayer</a></td><td class="desc">Basic function to simulate a normalization layer </td></tr>
<tr id="row_0_334_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_normalization_layer_kernel.xhtml" target="_self">NENormalizationLayerKernel</a></td><td class="desc">Interface for the normalization layer kernel </td></tr>
<tr id="row_0_335_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_optical_flow.xhtml" target="_self">NEOpticalFlow</a></td><td class="desc">Basic function to execute optical flow </td></tr>
<tr id="row_0_336_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_phase.xhtml" target="_self">NEPhase</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_magnitude_phase_kernel.xhtml" title="Template interface for the kernel to compute magnitude and phase. ">NEMagnitudePhaseKernel</a> </td></tr>
<tr id="row_0_337_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication.xhtml" target="_self">NEPixelWiseMultiplication</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml">NEPixelWiseMultiplicationKernel</a> </td></tr>
<tr id="row_0_338_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pixel_wise_multiplication_kernel.xhtml" target="_self">NEPixelWiseMultiplicationKernel</a></td><td class="desc">Interface for the kernel to perform addition between two tensors </td></tr>
<tr id="row_0_339_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pooling_layer.xhtml" target="_self">NEPoolingLayer</a></td><td class="desc">Basic function to simulate a pooling layer with the specified pooling operation </td></tr>
<tr id="row_0_340_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_pooling_layer_kernel.xhtml" target="_self">NEPoolingLayerKernel</a></td><td class="desc">Interface for the pooling layer kernel </td></tr>
<tr id="row_0_341_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_remap.xhtml" target="_self">NERemap</a></td><td class="desc">Basic function to execute remap </td></tr>
<tr id="row_0_342_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_remap_kernel.xhtml" target="_self">NERemapKernel</a></td><td class="desc">NEON kernel to perform a remap on a tensor </td></tr>
<tr id="row_0_343_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scale.xhtml" target="_self">NEScale</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_scale_kernel.xhtml">NEScaleKernel</a> </td></tr>
<tr id="row_0_344_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scale_kernel.xhtml" target="_self">NEScaleKernel</a></td><td class="desc">NEON kernel to perform scaling on a tensor </td></tr>
<tr id="row_0_345_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scharr3x3.xhtml" target="_self">NEScharr3x3</a></td><td class="desc">Basic function to execute scharr 3x3 filter </td></tr>
<tr id="row_0_346_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_scharr3x3_kernel.xhtml" target="_self">NEScharr3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Scharr filter on a tensor </td></tr>
<tr id="row_0_347_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_separable_convolution_hor_kernel.xhtml" target="_self">NESeparableConvolutionHorKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the Horizontal pass of a Separable Convolution </td></tr>
<tr id="row_0_348_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_separable_convolution_vert_kernel.xhtml" target="_self">NESeparableConvolutionVertKernel</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_kernel.xhtml" title="Kernel class. ">Kernel</a> for the Vertical pass of a Separable Convolution </td></tr>
<tr id="row_0_349_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel3x3.xhtml" target="_self">NESobel3x3</a></td><td class="desc">Basic function to execute sobel 3x3 filter </td></tr>
<tr id="row_0_350_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel3x3_kernel.xhtml" target="_self">NESobel3x3Kernel</a></td><td class="desc">Interface for the kernel to run a 3x3 Sobel X filter on a tensor </td></tr>
<tr id="row_0_351_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5.xhtml" target="_self">NESobel5x5</a></td><td class="desc">Basic function to execute sobel 5x5 filter </td></tr>
<tr id="row_0_352_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5_hor_kernel.xhtml" target="_self">NESobel5x5HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 5x5 Sobel filter on a tensor </td></tr>
<tr id="row_0_353_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel5x5_vert_kernel.xhtml" target="_self">NESobel5x5VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 5x5 Sobel Y filter on a tensor </td></tr>
<tr id="row_0_354_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7.xhtml" target="_self">NESobel7x7</a></td><td class="desc">Basic function to execute sobel 7x7 filter </td></tr>
<tr id="row_0_355_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7_hor_kernel.xhtml" target="_self">NESobel7x7HorKernel</a></td><td class="desc">Interface for the kernel to run the horizontal pass of 7x7 Sobel filter on a tensor </td></tr>
<tr id="row_0_356_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_sobel7x7_vert_kernel.xhtml" target="_self">NESobel7x7VertKernel</a></td><td class="desc">Interface for the kernel to run the vertical pass of 7x7 Sobel Y filter on a tensor </td></tr>
<tr id="row_0_357_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_softmax_layer.xhtml" target="_self">NESoftmaxLayer</a></td><td class="desc">Basic function to compute a SoftmaxLayer </td></tr>
<tr id="row_0_358_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_table_lookup.xhtml" target="_self">NETableLookup</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_table_lookup_kernel.xhtml">NETableLookupKernel</a> </td></tr>
<tr id="row_0_359_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_table_lookup_kernel.xhtml" target="_self">NETableLookupKernel</a></td><td class="desc">Interface for the kernel to perform table lookup calculations </td></tr>
<tr id="row_0_360_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_threshold.xhtml" target="_self">NEThreshold</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_threshold_kernel.xhtml">NEThresholdKernel</a> </td></tr>
<tr id="row_0_361_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_threshold_kernel.xhtml" target="_self">NEThresholdKernel</a></td><td class="desc">Interface for the thresholding kernel </td></tr>
<tr id="row_0_362_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_transpose.xhtml" target="_self">NETranspose</a></td><td class="desc">Basic function to transpose a matrix on NEON </td></tr>
<tr id="row_0_363_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_transpose_kernel.xhtml" target="_self">NETransposeKernel</a></td><td class="desc">NEON kernel which transposes the elements of a matrix </td></tr>
<tr id="row_0_364_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_affine.xhtml" target="_self">NEWarpAffine</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml">NEWarpAffineKernel</a> </td></tr>
<tr id="row_0_365_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_affine_kernel.xhtml" target="_self">NEWarpAffineKernel</a></td><td class="desc">Template interface for the kernel to compute warp affine </td></tr>
<tr id="row_0_366_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_perspective.xhtml" target="_self">NEWarpPerspective</a></td><td class="desc">Basic function to run <a class="el" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml">NEWarpPerspectiveKernel</a> </td></tr>
<tr id="row_0_367_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_n_e_warp_perspective_kernel.xhtml" target="_self">NEWarpPerspectiveKernel</a></td><td class="desc">Template interface for the kernel to compute warp perspective </td></tr>
<tr id="row_0_368_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_normalization_layer_info.xhtml" target="_self">NormalizationLayerInfo</a></td><td class="desc">Normalization Layer Information class </td></tr>
<tr id="row_0_369_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pad_stride_info.xhtml" target="_self">PadStrideInfo</a></td><td class="desc">Padding and stride information class </td></tr>
<tr id="row_0_370_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pixel_value.xhtml" target="_self">PixelValue</a></td><td class="desc">Class describing the value of a pixel for any image format </td></tr>
<tr id="row_0_371_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pooling_layer_info.xhtml" target="_self">PoolingLayerInfo</a></td><td class="desc">Pooling Layer Information class </td></tr>
<tr id="row_0_372_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_program.xhtml" target="_self">Program</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_program.xhtml" title="Program class. ">Program</a> class </td></tr>
<tr id="row_0_373_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pyramid.xhtml" target="_self">Pyramid</a></td><td class="desc">Basic implementation of the pyramid interface </td></tr>
<tr id="row_0_374_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_pyramid_info.xhtml" target="_self">PyramidInfo</a></td><td class="desc">Store the <a class="el" href="classarm__compute_1_1_pyramid.xhtml" title="Basic implementation of the pyramid interface. ">Pyramid</a>'s metadata </td></tr>
<tr id="row_0_375_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_rectangle.xhtml" target="_self">Rectangle</a></td><td class="desc"><a class="el" href="structarm__compute_1_1_rectangle.xhtml" title="Rectangle type. ">Rectangle</a> type </td></tr>
<tr id="row_0_376_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_size2_d.xhtml" target="_self">Size2D</a></td><td class="desc">Class for specifying the size of an image or rectangle </td></tr>
<tr id="row_0_377_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_steps.xhtml" target="_self">Steps</a></td><td class="desc">Class to describe a number of elements in each dimension </td></tr>
<tr id="row_0_378_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_strides.xhtml" target="_self">Strides</a></td><td class="desc"><a class="el" href="classarm__compute_1_1_strides.xhtml" title="Strides of an item in bytes. ">Strides</a> of an item in bytes </td></tr>
<tr id="row_0_379_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor.xhtml" target="_self">Tensor</a></td><td class="desc">Basic implementation of the tensor interface </td></tr>
<tr id="row_0_380_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_allocator.xhtml" target="_self">TensorAllocator</a></td><td class="desc">Basic implementation of a CPU memory tensor allocator </td></tr>
<tr id="row_0_381_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_info.xhtml" target="_self">TensorInfo</a></td><td class="desc">Store the tensor's metadata </td></tr>
<tr id="row_0_382_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_tensor_shape.xhtml" target="_self">TensorShape</a></td><td class="desc">Shape of a tensor </td></tr>
<tr id="row_0_383_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structarm__compute_1_1_valid_region.xhtml" target="_self">ValidRegion</a></td><td class="desc"></td></tr>
<tr id="row_0_384_" style="display:none;"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span id="arr_0_384_" class="arrow" onclick="toggleFolder('0_384_')">&#9658;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_window.xhtml" target="_self">Window</a></td><td class="desc">Describe a multidimensional execution window </td></tr>
<tr id="row_0_384_0_" style="display:none;"><td class="entry"><span style="width:48px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classarm__compute_1_1_window_1_1_dimension.xhtml" target="_self">Dimension</a></td><td class="desc">Describe one of the image's dimensions with a start, end and step </td></tr>
<tr id="row_1_"><td class="entry"><span style="width:0px;display:inline-block;">&#160;</span><span id="arr_1_" class="arrow" onclick="toggleFolder('1_')">&#9658;</span><span class="icona"><span class="icon">N</span></span><a class="el" href="namespacetest__helpers.xhtml" target="_self">test_helpers</a></td><td class="desc"></td></tr>
<tr id="row_1_0_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="classtest__helpers_1_1_p_p_m_loader.xhtml" target="_self">PPMLoader</a></td><td class="desc">Class to load the content of a PPM file into an <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> </td></tr>
<tr id="row_2_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_coordinates2_d.xhtml" target="_self">Coordinates2D</a></td><td class="desc">2D Coordinates structure </td></tr>
<tr id="row_3_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_image.xhtml" target="_self">Image</a></td><td class="desc">Structure to hold <a class="el" href="struct_image.xhtml" title="Structure to hold Image information. ">Image</a> information </td></tr>
<tr id="row_4_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_internal_keypoint.xhtml" target="_self">InternalKeypoint</a></td><td class="desc"></td></tr>
<tr id="row_5_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_keypoint.xhtml" target="_self">Keypoint</a></td><td class="desc"></td></tr>
<tr id="row_6_" class="even"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_tensor3_d.xhtml" target="_self">Tensor3D</a></td><td class="desc">Structure to hold 3D tensor information </td></tr>
<tr id="row_7_"><td class="entry"><span style="width:16px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="struct_vector.xhtml" target="_self">Vector</a></td><td class="desc">Structure to hold <a class="el" href="struct_vector.xhtml" title="Structure to hold Vector information. ">Vector</a> information </td></tr>
</table>
</div><!-- directory -->
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Wed May 3 2017 17:20:05 for ARM Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
